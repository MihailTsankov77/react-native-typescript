{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport List from \"./.newFolder/CustomComponents/CustomCardList\";\nimport TestQuestionCard from \"./TestQuestionCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar StartTest = function (_Component) {\n  _inherits(StartTest, _Component);\n\n  var _super = _createSuper(StartTest);\n\n  function StartTest() {\n    var _this;\n\n    _classCallCheck(this, StartTest);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      selected: []\n    };\n\n    _this.handleSelected = function (answer, questionId) {\n      var existing = _this.state.selected.filter(function (sel) {\n        return sel.id === questionId;\n      });\n\n      if (existing.length === 1) {\n        existing[0].answers.push(answer);\n\n        _this.setState({\n          selected: _this.state.selected.map(function (sel) {\n            return sel.id === existing.id;\n          })\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(StartTest, [{\n    key: \"render\",\n    value: function render() {\n      return _jsx(_Fragment, {\n        children: _jsx(List, {\n          items: this.props.questions,\n          options: {\n            selectedAnswers: this.state.selected\n          },\n          Card: TestQuestionCard\n        })\n      });\n    }\n  }]);\n\n  return StartTest;\n}(Component);\n\nexport { StartTest as default };","map":{"version":3,"names":["React","Component","List","TestQuestionCard","StartTest","state","selected","handleSelected","answer","questionId","existing","filter","sel","id","length","answers","push","setState","map","props","questions","selectedAnswers"],"sources":["/Users/mihail.tsankov/Desktop/bootcamp/git/react-native-typescript/react-native/test_02/Components/StartTest.tsx"],"sourcesContent":["import React, { Component, ComponentType } from 'react';\nimport Answer from '../modules/Answer';\nimport Question from '../modules/Question';\nimport List from \"./.newFolder/CustomComponents/CustomCardList\";\nimport TestQuestionCard from './TestQuestionCard';\n\ninterface StartTestProps {\n  questions: Question[];\n}\n\nexport type Selected = {\n  id: number;\n  answers: Answer[];\n}\n\ninterface StartTestState {\n  selected: Selected[];\n}\n\nexport default class StartTest extends Component<StartTestProps, StartTestState> {\n\n  state: Readonly<StartTestState> ={\n    selected: [],\n  }\n\n  handleSelected = (answer: Answer, questionId: number) => {\n    const existing = this.state.selected.filter(sel => sel.id === questionId);\n    if(existing.length===1){\n      existing[0].answers.push(answer);\n      this.setState({selected: this.state.selected.map(sel => sel.id === existing.id)})\n    }\n  }\n\n  render() {\n    return (<>\n      <List items={this.props.questions} options={{selectedAnswers: this.state.selected, }} Card={TestQuestionCard  as unknown as ComponentType<Question>} />\n    </>)\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgD,OAAhD;AAGA,OAAOC,IAAP;AACA,OAAOC,gBAAP;;;;IAeqBC,S;;;;;;;;;;;;;;;UAEnBC,K,GAAiC;MAC/BC,QAAQ,EAAE;IADqB,C;;UAIjCC,c,GAAiB,UAACC,MAAD,EAAiBC,UAAjB,EAAwC;MACvD,IAAMC,QAAQ,GAAG,MAAKL,KAAL,CAAWC,QAAX,CAAoBK,MAApB,CAA2B,UAAAC,GAAG;QAAA,OAAIA,GAAG,CAACC,EAAJ,KAAWJ,UAAf;MAAA,CAA9B,CAAjB;;MACA,IAAGC,QAAQ,CAACI,MAAT,KAAkB,CAArB,EAAuB;QACrBJ,QAAQ,CAAC,CAAD,CAAR,CAAYK,OAAZ,CAAoBC,IAApB,CAAyBR,MAAzB;;QACA,MAAKS,QAAL,CAAc;UAACX,QAAQ,EAAE,MAAKD,KAAL,CAAWC,QAAX,CAAoBY,GAApB,CAAwB,UAAAN,GAAG;YAAA,OAAIA,GAAG,CAACC,EAAJ,KAAWH,QAAQ,CAACG,EAAxB;UAAA,CAA3B;QAAX,CAAd;MACD;IACF,C;;;;;;;WAED,kBAAS;MACP,OAAQ;QAAA,UACN,KAAC,IAAD;UAAM,KAAK,EAAE,KAAKM,KAAL,CAAWC,SAAxB;UAAmC,OAAO,EAAE;YAACC,eAAe,EAAE,KAAKhB,KAAL,CAAWC;UAA7B,CAA5C;UAAsF,IAAI,EAAEH;QAA5F;MADM,EAAR;IAGD;;;;EAlBoCF,S;;SAAlBG,S"},"metadata":{},"sourceType":"module"}