{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { TypeAnswers } from \"../modules/Question\";\nimport List from \"./.newFolder/CustomComponents/CustomCardList\";\nimport TestQuestionCard from \"./TestQuestionCard\";\nimport Btn from \"./.newFolder/CustomComponents/CustomButton\";\nimport TestReadyQuestionCard from \"./TestReadyQuestionCard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StartTest = function (_Component) {\n  _inherits(StartTest, _Component);\n\n  var _super = _createSuper(StartTest);\n\n  function StartTest() {\n    var _this;\n\n    _classCallCheck(this, StartTest);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      selected: [],\n      score: undefined\n    };\n\n    _this.handleSelected = function (answer, questionId) {\n      var existing = _this.state.selected.filter(function (sel) {\n        return sel.id === questionId;\n      });\n\n      if (existing.length === 1) {\n        var quest = _this.props.questions.filter(function (q) {\n          return q.id === questionId;\n        })[0];\n\n        if (TypeAnswers[quest.type] === TypeAnswers.MultipleChoise) {\n          var index = existing[0].answers.indexOf(answer);\n\n          if (index === -1) {\n            existing[0].answers.push(answer);\n          } else {\n            existing[0].answers.splice(index, 1);\n          }\n\n          _this.setState({\n            selected: _this.state.selected.map(function (sel) {\n              return sel.id === existing[0].id ? existing[0] : sel;\n            })\n          });\n        } else {\n          var _index = existing[0].answers.indexOf(answer);\n\n          if (_index === -1) {\n            existing[0].answers = [answer];\n          }\n\n          _this.setState({\n            selected: _this.state.selected.map(function (sel) {\n              return sel.id === existing[0].id ? existing[0] : sel;\n            })\n          });\n        }\n      } else {\n        _this.setState({\n          selected: _this.state.selected.concat({\n            id: questionId,\n            answers: [answer]\n          })\n        });\n      }\n    };\n\n    _this.handleSubmit = function () {\n      var selected = _this.state.selected;\n      var questions = _this.props.questions;\n      var score = 0;\n      questions.map(function (q) {\n        return score += q.points * selected.filter(function (sel) {\n          return sel.id === q.id;\n        })[0].answers.reduce(function (prev, newV) {\n          return prev + newV.scorePr;\n        }, 0) / 100;\n      });\n\n      _this.setState({\n        score: score\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StartTest, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(_Fragment, {\n        children: !this.state.score ? _jsxs(_Fragment, {\n          children: [_jsx(List, {\n            items: this.props.questions,\n            options: {\n              selectedAnswers: this.state.selected,\n              onSelectAnswer: this.handleSelected\n            },\n            Card: TestQuestionCard\n          }), _jsx(Btn, {\n            event: function event() {\n              return _this2.handleSubmit();\n            },\n            value: \"Complete Test\"\n          })]\n        }) : _jsxs(_Fragment, {\n          children: [_jsxs(Text, {\n            style: {\n              padding: 5,\n              fontSize: 30,\n              alignSelf: 'center'\n            },\n            children: [\" Your Score: \", this.state.score, \"/\", this.props.questions.reduce(function (prev, next) {\n              return prev += next.points;\n            }, 0)]\n          }), _jsx(List, {\n            items: this.props.questions,\n            options: {\n              selectedAnswers: this.state.selected,\n              onSelectAnswer: this.handleSelected\n            },\n            Card: TestReadyQuestionCard\n          })]\n        })\n      });\n    }\n  }]);\n\n  return StartTest;\n}(Component);\n\nexport { StartTest as default };","map":{"version":3,"names":["React","Component","TypeAnswers","List","TestQuestionCard","Btn","TestReadyQuestionCard","StartTest","state","selected","score","undefined","handleSelected","answer","questionId","existing","filter","sel","id","length","quest","props","questions","q","type","MultipleChoise","index","answers","indexOf","push","splice","setState","map","concat","handleSubmit","points","reduce","prev","newV","scorePr","selectedAnswers","onSelectAnswer","padding","fontSize","alignSelf","next"],"sources":["/Users/mihail.tsankov/Desktop/bootcamp/git/react-native-typescript/react-native/test_02/Components/StartTest.tsx"],"sourcesContent":["import React, { Component, ComponentType } from 'react';\nimport Answer from '../modules/Answer';\nimport Question, { TypeAnswers } from '../modules/Question';\nimport List from \"./.newFolder/CustomComponents/CustomCardList\";\nimport TestQuestionCard from './TestQuestionCard';\n\nimport Btn from \"./.newFolder/CustomComponents/CustomButton\";\nimport TestReadyQuestionCard from './TestReadyQuestionCard';\nimport { Text } from 'react-native';\n\ninterface StartTestProps {\n  questions: Question[];\n}\n\nexport type Selected = {\n  id: number;\n  answers: Answer[];\n}\n\ninterface StartTestState {\n  selected: Selected[];\n  score: number | undefined;\n}\n\nexport default class StartTest extends Component<StartTestProps, StartTestState> {\n\n  state: Readonly<StartTestState> ={\n    selected: [],\n    score: undefined,\n  }\n\n  handleSelected = (answer: Answer, questionId: number) => {\n    \n    const existing = this.state.selected.filter(sel => sel.id === questionId);\n    if(existing.length===1){\n\n      const quest = this.props.questions.filter(q => q.id === questionId)[0];\n\n      if( TypeAnswers[quest.type] as unknown as TypeAnswers === TypeAnswers.MultipleChoise){\n\n        const index = existing[0].answers.indexOf(answer);\n        if(index === -1){\n          existing[0].answers.push(answer);\n        }else{\n          existing[0].answers.splice(index,1);\n        }\n        this.setState({selected: this.state.selected.map(sel => sel.id === existing[0].id? existing[0]: sel)});\n      }else{\n        const index = existing[0].answers.indexOf(answer);\n        if(index === -1){\n          existing[0].answers = [answer];\n        }\n        this.setState({selected: this.state.selected.map(sel => sel.id === existing[0].id? existing[0]: sel)});\n      }\n\n\n\n    }else{\n      this.setState({selected: this.state.selected.concat({id: questionId, answers: [answer]})});\n    }\n  }\n  handleSubmit = () =>{\n    const {selected} = this.state;\n    const {questions} = this.props;\n    let score = 0;\n    questions.map(q=> score += q.points* selected.filter(sel => sel.id === q.id)[0].answers.reduce((prev, newV)=> prev+newV.scorePr, 0)/100)\n\n    this.setState({score: score});\n  }\n\n  render() {\n    return (<>\n    {!this.state.score?\n      <>\n        <List items={this.props.questions} options={{selectedAnswers: this.state.selected, onSelectAnswer: this.handleSelected }} Card={TestQuestionCard  as unknown as ComponentType<Question>} />\n        <Btn event={() => this.handleSubmit()} value=\"Complete Test\"/>\n      </>\n      :\n      <>\n        <Text style={{padding:5, fontSize:30, alignSelf:'center'}}> Your Score: {this.state.score}/{this.props.questions.reduce((prev, next)=> prev+= next.points, 0)}</Text>\n        <List items={this.props.questions} options={{selectedAnswers: this.state.selected, onSelectAnswer: this.handleSelected}} Card={TestReadyQuestionCard  as unknown as ComponentType<Question>} />\n      </>\n      }\n    </>)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}