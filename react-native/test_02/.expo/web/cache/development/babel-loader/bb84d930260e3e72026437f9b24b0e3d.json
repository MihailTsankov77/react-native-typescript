{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nexport var Validators = _createClass(function Validators() {\n  _classCallCheck(this, Validators);\n});\n\nValidators.required = function () {\n  return function (value, field) {\n    if (value.trim().length === 0) {\n      return \"The field '\" + field + \"' is required\";\n    }\n\n    return false;\n  };\n};\n\nValidators.pattern = function (validationPattern) {\n  return function (value, field) {\n    if (!validationPattern.test(value)) {\n      return \"The field '\" + field + \"' does not match pattern\";\n    }\n\n    return false;\n  };\n};\n\nValidators.len = function (min, max) {\n  return function (value, field) {\n    if (value.length < min) {\n      return \"The field '\" + field + \"' should be at least \" + min + \" characters long\";\n    } else if (max) {\n      if (value.length > max) {\n        return \"The field '\" + field + \"' should be no more tan \" + max + \" characters long\";\n      }\n    }\n\n    return false;\n  };\n};\n\nValidators.isPass = function () {\n  return function (value, field) {\n    var hasNumber = new RegExp(\"[0-9]\");\n    var hasSpecial = new RegExp(\"[@$!%*#?&]\");\n    var hasLetter = new RegExp(\"[a-zA-Z]\");\n\n    if (!hasNumber.test(value)) {\n      return \"The field '\" + field + \"' should have number\";\n    }\n\n    if (!hasSpecial.test(value)) {\n      return \"The field '\" + field + \"' should have spacial\";\n    }\n\n    if (!hasLetter.test(value)) {\n      return \"The field '\" + field + \"' should have letter\";\n    }\n\n    return false;\n  };\n};","map":{"version":3,"names":["Validators","required","value","field","trim","length","pattern","validationPattern","test","len","min","max","isPass","hasNumber","RegExp","hasSpecial","hasLetter"],"sources":["/Users/mihail.tsankov/Desktop/bootcamp/git/react-native-typescript/react-native/test_02/Components/.newFolder/CustomComponents/Validators/validators.ts"],"sourcesContent":["\n\nexport type ValidationConfig<T> = {\n    [P in keyof T]?: Validator | Validator[]\n}\n\nexport type ValidationConfigLogIn = {\n    'username': Validator | Validator[]\n    'password': Validator | Validator[]\n}\n\nexport type ValidationResult<T> = {\n    [P in keyof T]?: string[]\n}\n\nexport type ValidationResultLogin = {\n    'username': string[],\n    'password': string[]\n}\n\n\nexport type Validator = (value: string, field: string) => Promise<string | false> | string | boolean;\n\nexport type ValidatorFactory = (...args: any) => Validator\n\nexport class Validators {\n    static required: ValidatorFactory = () => (value: string, field: string) => {\n        if(value.trim().length === 0) {\n            return `The field '${field}' is required`;\n        }\n        return false;\n    }\n    static pattern: ValidatorFactory = (validationPattern: RegExp) => (value: string, field: string) => {\n        if(!validationPattern.test(value)) {\n            return `The field '${field}' does not match pattern`;\n        }\n        return false;\n    }\n    static len: ValidatorFactory = (min: number, max?: number) => (value: string, field: string) => {\n        if(value.length < min) {\n            return `The field '${field}' should be at least ${min} characters long`;\n        } else if(max){\n            if (value.length > max) {\n                return `The field '${field}' should be no more tan ${max} characters long`;\n            }\n        }\n        return false;\n    }\n\n    static isPass: ValidatorFactory = () => (value: string, field: string) => {\n       const hasNumber = new RegExp(\"[0-9]\");\n       let hasSpecial = new RegExp(\"[@$!%*#?&]\");\n       let hasLetter = new RegExp(\"[a-zA-Z]\");\n    if(!hasNumber.test(value)) {\n        return `The field '${field}' should have number`;\n    }\n    if(!hasSpecial.test(value)) {\n        return `The field '${field}' should have spacial`;\n    }\n    if(!hasLetter.test(value)) {\n        return `The field '${field}' should have letter`;\n    }\n        \n       \n        return false;\n    }\n\n  \n\n\n\n    \n\n}"],"mappings":";;AAyBA,WAAaA,UAAb;EAAA;AAAA;;AAAaA,U,CACFC,Q,GAA6B;EAAA,OAAM,UAACC,KAAD,EAAgBC,KAAhB,EAAkC;IACxE,IAAGD,KAAK,CAACE,IAAN,GAAaC,MAAb,KAAwB,CAA3B,EAA8B;MAC1B,uBAAqBF,KAArB;IACH;;IACD,OAAO,KAAP;EACH,CALmC;AAAA,C;;AAD3BH,U,CAOFM,O,GAA4B,UAACC,iBAAD;EAAA,OAA+B,UAACL,KAAD,EAAgBC,KAAhB,EAAkC;IAChG,IAAG,CAACI,iBAAiB,CAACC,IAAlB,CAAuBN,KAAvB,CAAJ,EAAmC;MAC/B,uBAAqBC,KAArB;IACH;;IACD,OAAO,KAAP;EACH,CALkC;AAAA,C;;AAP1BH,U,CAaFS,G,GAAwB,UAACC,GAAD,EAAcC,GAAd;EAAA,OAA+B,UAACT,KAAD,EAAgBC,KAAhB,EAAkC;IAC5F,IAAGD,KAAK,CAACG,MAAN,GAAeK,GAAlB,EAAuB;MACnB,uBAAqBP,KAArB,6BAAkDO,GAAlD;IACH,CAFD,MAEO,IAAGC,GAAH,EAAO;MACV,IAAIT,KAAK,CAACG,MAAN,GAAeM,GAAnB,EAAwB;QACpB,uBAAqBR,KAArB,gCAAqDQ,GAArD;MACH;IACJ;;IACD,OAAO,KAAP;EACH,CAT8B;AAAA,C;;AAbtBX,U,CAwBFY,M,GAA2B;EAAA,OAAM,UAACV,KAAD,EAAgBC,KAAhB,EAAkC;IACvE,IAAMU,SAAS,GAAG,IAAIC,MAAJ,CAAW,OAAX,CAAlB;IACA,IAAIC,UAAU,GAAG,IAAID,MAAJ,CAAW,YAAX,CAAjB;IACA,IAAIE,SAAS,GAAG,IAAIF,MAAJ,CAAW,UAAX,CAAhB;;IACH,IAAG,CAACD,SAAS,CAACL,IAAV,CAAeN,KAAf,CAAJ,EAA2B;MACvB,uBAAqBC,KAArB;IACH;;IACD,IAAG,CAACY,UAAU,CAACP,IAAX,CAAgBN,KAAhB,CAAJ,EAA4B;MACxB,uBAAqBC,KAArB;IACH;;IACD,IAAG,CAACa,SAAS,CAACR,IAAV,CAAeN,KAAf,CAAJ,EAA2B;MACvB,uBAAqBC,KAArB;IACH;;IAGG,OAAO,KAAP;EACH,CAhBiC;AAAA,C"},"metadata":{},"sourceType":"module"}