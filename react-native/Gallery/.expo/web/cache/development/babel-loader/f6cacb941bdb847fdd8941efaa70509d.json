{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { daySize } from \"./dateUtils\";\n\nfunction DayRange(_ref) {\n  var leftCrop = _ref.leftCrop,\n      rightCrop = _ref.rightCrop,\n      inRange = _ref.inRange,\n      selectColor = _ref.selectColor;\n  var bothWays = inRange && leftCrop && rightCrop;\n  var isCrop = inRange && (leftCrop || rightCrop) && !(leftCrop && rightCrop);\n\n  if (inRange || isCrop) {\n    return React.createElement(View, {\n      pointerEvents: \"none\",\n      style: [StyleSheet.absoluteFill, styles.rangeRoot, bothWays && styles.rangeRootBoth, inRange && !isCrop ? {\n        backgroundColor: selectColor\n      } : null]\n    }, isCrop && React.createElement(React.Fragment, null, React.createElement(View, {\n      style: [styles.flex1, rightCrop ? {\n        backgroundColor: selectColor\n      } : null]\n    }), React.createElement(View, {\n      style: [{\n        backgroundColor: selectColor,\n        minWidth: daySize,\n        minHeight: daySize\n      }, leftCrop ? styles.leftRadius : null, rightCrop ? styles.rightRadius : null]\n    }), React.createElement(View, {\n      style: [styles.flex1, leftCrop ? {\n        backgroundColor: selectColor\n      } : null]\n    })));\n  }\n\n  return null;\n}\n\nvar styles = StyleSheet.create({\n  leftRadius: {\n    borderBottomLeftRadius: daySize / 2,\n    borderTopLeftRadius: daySize / 2\n  },\n  rightRadius: {\n    borderBottomRightRadius: daySize / 2,\n    borderTopRightRadius: daySize / 2\n  },\n  rangeRootBoth: {\n    borderRadius: daySize / 2\n  },\n  flex1: {\n    flex: 1\n  },\n  rangeRoot: {\n    flexDirection: 'row'\n  }\n});\nexport default React.memo(DayRange);","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,OAAT;;AAEA,SAASC,QAAT,OAUG;EAAA,IATDC,QASC,QATDA,QASC;EAAA,IARDC,SAQC,QARDA,SAQC;EAAA,IAPDC,OAOC,QAPDA,OAOC;EAAA,IANDC,WAMC,QANDA,WAMC;EACD,IAAMC,QAAQ,GAAGF,OAAO,IAAIF,QAAXE,IAAuBD,SAAxC;EACA,IAAMI,MAAM,GAAGH,OAAO,KAAKF,QAAQ,IAAIC,SAAjB,CAAPC,IAAsC,EAAEF,QAAQ,IAAIC,SAAd,CAArD;;EAEA,IAAIC,OAAO,IAAIG,MAAf,EAAuB;IACrB,OACER,oBAACS,IAAD;MACEC,aAAa,EAAC,MADhB;MAEEC,KAAK,EAAE,CACLC,UAAU,CAACC,YADN,EAELC,MAAM,CAACC,SAFF,EAGLR,QAAQ,IAAIO,MAAM,CAACE,aAHd,EAILX,OAAO,IAAI,CAACG,MAAZH,GACI;QACEY,eAAe,EAAEX;MADnB,CADJD,GAII,IARC;IAFT,GAaGG,MAAM,IACLR,0CACEA,oBAACS,IAAD;MACEE,KAAK,EAAE,CACLG,MAAM,CAACI,KADF,EAELd,SAAS,GACL;QACEa,eAAe,EAAEX;MADnB,CADK,GAIL,IANC;IADT,EADF,EAWEN,oBAACS,IAAD;MACEE,KAAK,EAAE,CACL;QACEM,eAAe,EAAEX,WADnB;QAEEa,QAAQ,EAAElB,OAFZ;QAGEmB,SAAS,EAAEnB;MAHb,CADK,EAMLE,QAAQ,GAAGW,MAAM,CAACO,UAAV,GAAuB,IAN1B,EAOLjB,SAAS,GAAGU,MAAM,CAACQ,WAAV,GAAwB,IAP5B;IADT,EAXF,EAsBEtB,oBAACS,IAAD;MACEE,KAAK,EAAE,CACLG,MAAM,CAACI,KADF,EAELf,QAAQ,GACJ;QACEc,eAAe,EAAEX;MADnB,CADI,GAIJ,IANC;IADT,EAtBF,CAdJ,CADF;EAmDD;;EACD,OAAO,IAAP;AACD;;AAED,IAAMQ,MAAM,GAAGF,UAAU,CAACW,MAAXX,CAAkB;EAC/BS,UAAU,EAAE;IACVG,sBAAsB,EAAEvB,OAAO,GAAG,CADxB;IAEVwB,mBAAmB,EAAExB,OAAO,GAAG;EAFrB,CADmB;EAK/BqB,WAAW,EAAE;IACXI,uBAAuB,EAAEzB,OAAO,GAAG,CADxB;IAEX0B,oBAAoB,EAAE1B,OAAO,GAAG;EAFrB,CALkB;EAS/Be,aAAa,EAAE;IACbY,YAAY,EAAE3B,OAAO,GAAG;EADX,CATgB;EAY/BiB,KAAK,EAAE;IACLW,IAAI,EAAE;EADD,CAZwB;EAe/Bd,SAAS,EAAE;IACTe,aAAa,EAAE;EADN;AAfoB,CAAlBlB,CAAf;AAoBA,eAAeZ,KAAK,CAAC+B,IAAN/B,CAAWE,QAAXF,CAAf","names":["React","daySize","DayRange","leftCrop","rightCrop","inRange","selectColor","bothWays","isCrop","View","pointerEvents","style","StyleSheet","absoluteFill","styles","rangeRoot","rangeRootBoth","backgroundColor","flex1","minWidth","minHeight","leftRadius","rightRadius","create","borderBottomLeftRadius","borderTopLeftRadius","borderBottomRightRadius","borderTopRightRadius","borderRadius","flex","flexDirection","memo"],"sources":["DayRange.tsx"],"sourcesContent":["import * as React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { daySize } from './dateUtils'\n\nfunction DayRange({\n  leftCrop,\n  rightCrop,\n  inRange,\n  selectColor,\n}: {\n  leftCrop: boolean\n  rightCrop: boolean\n  inRange: boolean\n  selectColor: string\n}) {\n  const bothWays = inRange && leftCrop && rightCrop\n  const isCrop = inRange && (leftCrop || rightCrop) && !(leftCrop && rightCrop)\n\n  if (inRange || isCrop) {\n    return (\n      <View\n        pointerEvents=\"none\"\n        style={[\n          StyleSheet.absoluteFill,\n          styles.rangeRoot,\n          bothWays && styles.rangeRootBoth,\n          inRange && !isCrop\n            ? {\n                backgroundColor: selectColor,\n              }\n            : null,\n        ]}\n      >\n        {isCrop && (\n          <>\n            <View\n              style={[\n                styles.flex1,\n                rightCrop\n                  ? {\n                      backgroundColor: selectColor,\n                    }\n                  : null,\n              ]}\n            />\n            <View\n              style={[\n                {\n                  backgroundColor: selectColor,\n                  minWidth: daySize,\n                  minHeight: daySize,\n                },\n                leftCrop ? styles.leftRadius : null,\n                rightCrop ? styles.rightRadius : null,\n              ]}\n            />\n            <View\n              style={[\n                styles.flex1,\n                leftCrop\n                  ? {\n                      backgroundColor: selectColor,\n                    }\n                  : null,\n              ]}\n            />\n          </>\n        )}\n      </View>\n    )\n  }\n  return null\n}\n\nconst styles = StyleSheet.create({\n  leftRadius: {\n    borderBottomLeftRadius: daySize / 2,\n    borderTopLeftRadius: daySize / 2,\n  },\n  rightRadius: {\n    borderBottomRightRadius: daySize / 2,\n    borderTopRightRadius: daySize / 2,\n  },\n  rangeRootBoth: {\n    borderRadius: daySize / 2,\n  },\n  flex1: {\n    flex: 1,\n  },\n  rangeRoot: {\n    flexDirection: 'row',\n  },\n})\n\nexport default React.memo(DayRange)\n"]},"metadata":{},"sourceType":"module"}