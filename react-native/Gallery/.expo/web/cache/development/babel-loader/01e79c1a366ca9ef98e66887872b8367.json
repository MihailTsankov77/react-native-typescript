{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onChangeText\", \"value\", \"mask\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { TextInput } from 'react-native-paper';\nvar splitCharacters = ['-', '/', '.', '年', ' '];\n\nfunction detectCharacter(mask) {\n  var c = splitCharacters.find(function (ch) {\n    return mask.includes(ch);\n  });\n  return c || '';\n}\n\nfunction enhanceTextWithMask(text, mask, previousValue) {\n  var isBackSpace = previousValue.length > text.length;\n  var splitCharacter = detectCharacter(mask);\n  var maskParts = mask.split(splitCharacter);\n  var textParts = text.split(splitCharacter);\n  var finalString = [];\n\n  for (var maskPartIndex = 0; maskPartIndex < mask.length; maskPartIndex++) {\n    var partString = [];\n    var maskPart = maskParts[maskPartIndex];\n    var textPart = textParts[maskPartIndex];\n\n    if (!textPart) {\n      continue;\n    }\n\n    for (var maskDigitIndex = 0; maskDigitIndex < maskPart.length; maskDigitIndex++) {\n      var currentCharacter = textPart[maskDigitIndex];\n\n      if (isBackSpace && currentCharacter === undefined) {\n        continue;\n      }\n\n      var character = textPart[maskDigitIndex];\n\n      if (character !== undefined) {\n        partString.push(character);\n      }\n    }\n\n    finalString.push(partString.join(''));\n  }\n\n  var lastPart = finalString[finalString.length - 1];\n  var lastMaskPart = maskParts[finalString.length - 1];\n\n  if (finalString.length !== maskParts.length && lastPart && lastMaskPart && lastPart.length === lastMaskPart.length) {\n    return finalString.join(splitCharacter) + (isBackSpace ? '' : splitCharacter);\n  }\n\n  return finalString.join(splitCharacter);\n}\n\nfunction TextInputWithMask(_ref, ref) {\n  var onChangeText = _ref.onChangeText,\n      value = _ref.value,\n      mask = _ref.mask,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(value || ''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      controlledValue = _React$useState2[0],\n      setControlledValue = _React$useState2[1];\n\n  var onInnerChange = function onInnerChange(text) {\n    var enhancedText = enhanceTextWithMask(text, mask, controlledValue);\n    setControlledValue(enhancedText);\n\n    if (text.length === mask.length) {\n      onChangeText && onChangeText(text);\n    }\n  };\n\n  React.useEffect(function () {\n    setControlledValue(value || '');\n  }, [value]);\n  return React.createElement(TextInput, _extends({\n    ref: ref\n  }, rest, {\n    value: controlledValue,\n    onChangeText: onInnerChange\n  }));\n}\n\nexport default React.forwardRef(TextInputWithMask);","map":{"version":3,"mappings":"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","names":["React","TextInput","splitCharacters","detectCharacter","mask","c","find","ch","includes","enhanceTextWithMask","text","previousValue","isBackSpace","length","splitCharacter","maskParts","split","textParts","finalString","maskPartIndex","partString","maskPart","textPart","maskDigitIndex","currentCharacter","undefined","character","push","join","lastPart","lastMaskPart","TextInputWithMask","ref","onChangeText","value","rest","useState","controlledValue","setControlledValue","onInnerChange","enhancedText","useEffect","forwardRef"],"sources":["TextInputMask.tsx"],"sourcesContent":["import * as React from 'react'\nimport { TextInput } from 'react-native-paper'\n\nconst splitCharacters = ['-', '/', '.', '年', ' ']\nfunction detectCharacter(mask: string): string {\n  const c = splitCharacters.find((ch) => mask.includes(ch))\n  return c || ''\n}\n\nfunction enhanceTextWithMask(\n  text: string,\n  mask: string,\n  previousValue: string\n): string {\n  const isBackSpace = previousValue.length > text.length\n  const splitCharacter = detectCharacter(mask)\n\n  const maskParts = mask.split(splitCharacter)\n  const textParts = text.split(splitCharacter)\n\n  let finalString: string[] = []\n  for (let maskPartIndex = 0; maskPartIndex < mask.length; maskPartIndex++) {\n    let partString: string[] = []\n\n    const maskPart = maskParts[maskPartIndex]\n    const textPart = textParts[maskPartIndex]\n    if (!textPart) {\n      continue\n    }\n\n    for (\n      let maskDigitIndex = 0;\n      maskDigitIndex < maskPart.length;\n      maskDigitIndex++\n    ) {\n      const currentCharacter = textPart[maskDigitIndex]\n\n      if (isBackSpace && currentCharacter === undefined) {\n        continue\n      }\n\n      const character = textPart[maskDigitIndex]\n\n      if (character !== undefined) {\n        partString.push(character)\n      }\n    }\n\n    finalString.push(partString.join(''))\n  }\n\n  const lastPart = finalString[finalString.length - 1]\n  const lastMaskPart = maskParts[finalString.length - 1]\n  if (\n    // if mask is completed\n    finalString.length !== maskParts.length &&\n    // or ...\n    lastPart &&\n    lastMaskPart &&\n    lastPart.length === lastMaskPart.length\n  ) {\n    return (\n      finalString.join(splitCharacter) + (isBackSpace ? '' : splitCharacter)\n    )\n  }\n  return finalString.join(splitCharacter)\n}\n\nfunction TextInputWithMask(\n  {\n    onChangeText,\n    value,\n    mask,\n    ...rest\n  }: React.ComponentProps<typeof TextInput> & { mask: string },\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    value || ''\n  )\n\n  const onInnerChange = (text: string) => {\n    const enhancedText = enhanceTextWithMask(text, mask, controlledValue)\n    setControlledValue(enhancedText)\n\n    if (text.length === mask.length) {\n      onChangeText && onChangeText(text)\n    }\n  }\n\n  React.useEffect(() => {\n    setControlledValue(value || '')\n  }, [value])\n\n  return (\n    <TextInput\n      ref={ref}\n      {...rest}\n      value={controlledValue}\n      onChangeText={onInnerChange}\n    />\n  )\n}\n\nexport default React.forwardRef(TextInputWithMask)\n"]},"metadata":{},"sourceType":"module"}