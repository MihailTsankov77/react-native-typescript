{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport Color from 'color';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTheme } from 'react-native-paper';\nimport { circleSize, clockTypes, getAngle, getHours, getHourType, getHourTypeFromOffset, getMinutes, hourTypes } from \"./timeUtils\";\nimport * as React from 'react';\nimport { useLatest } from \"../utils\";\nimport AnalogClockHours from \"./AnalogClockHours\";\nimport AnimatedClockSwitcher from \"./AnimatedClockSwitcher\";\nimport AnalogClockMinutes from \"./AnalogClockMinutes\";\nimport { DisplayModeContext } from \"./TimePicker\";\n\nfunction AnalogClock(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      focused = _ref.focused,\n      is24Hour = _ref.is24Hour,\n      onChange = _ref.onChange;\n  var theme = useTheme();\n\n  var _React$useContext = React.useContext(DisplayModeContext),\n      mode = _React$useContext.mode;\n\n  var shortPointer = (hours === 0 || hours > 12) && is24Hour;\n  var clockRef = React.useRef(null);\n  var hoursRef = useLatest(hours);\n  var onChangeRef = useLatest(onChange);\n  var minutesRef = useLatest(minutes);\n  var focusedRef = useLatest(focused);\n  var is24HourRef = useLatest(is24Hour);\n  var modeRef = useLatest(mode);\n  var onPointerMove = React.useCallback(function (e, final) {\n    var x = e.nativeEvent.locationX;\n    var y = e.nativeEvent.locationY;\n    var angle = getAngle(x, y, circleSize);\n\n    if (focusedRef.current === clockTypes.hours) {\n      var hours24 = is24HourRef.current;\n      var previousHourType = getHourType(hoursRef.current);\n      var pickedHours = getHours(angle, previousHourType);\n      var hours12AndPm = !hours24 && modeRef.current === 'AM';\n      var hourTypeFromOffset = getHourTypeFromOffset(x, y, circleSize);\n      var hours24AndPM = hours24 && hourTypeFromOffset === hourTypes.pm;\n\n      if (hours12AndPm || hours24AndPM) {\n        pickedHours += 12;\n      }\n\n      if (modeRef.current === 'AM' && pickedHours === 12) {\n        pickedHours = 0;\n      }\n\n      if (!hours24 && modeRef.current === 'AM' && pickedHours === 12 || pickedHours === 24) {\n        pickedHours = 0;\n      }\n\n      if (hoursRef.current !== pickedHours || final) {\n        onChangeRef.current({\n          hours: pickedHours,\n          minutes: minutesRef.current,\n          focused: final ? clockTypes.minutes : undefined\n        });\n      }\n    } else if (focusedRef.current === clockTypes.minutes) {\n      var pickedMinutes = getMinutes(angle);\n\n      if (minutesRef.current !== pickedMinutes) {\n        onChangeRef.current({\n          hours: hoursRef.current,\n          minutes: pickedMinutes\n        });\n      }\n    }\n  }, [focusedRef, is24HourRef, hoursRef, onChangeRef, minutesRef, modeRef]);\n  var panResponder = React.useRef(PanResponder.create({\n    onPanResponderGrant: function onPanResponderGrant(e) {\n      return onPointerMove(e, false);\n    },\n    onPanResponderMove: function onPanResponderMove(e) {\n      return onPointerMove(e, false);\n    },\n    onPanResponderRelease: function onPanResponderRelease(e) {\n      return onPointerMove(e, true);\n    },\n    onStartShouldSetPanResponder: returnTrue,\n    onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {\n      return false;\n    },\n    onMoveShouldSetPanResponder: returnTrue,\n    onMoveShouldSetPanResponderCapture: returnTrue,\n    onPanResponderTerminationRequest: returnTrue,\n    onShouldBlockNativeResponder: returnTrue\n  })).current;\n  var dynamicSize = focused === clockTypes.hours && shortPointer ? 33 : 0;\n  var pointerNumber = focused === clockTypes.hours ? hours : minutes;\n  var degreesPerNumber = focused === clockTypes.hours ? 30 : 6;\n  return React.createElement(View, _extends({\n    ref: clockRef\n  }, panResponder.panHandlers, {\n    style: [styles.clock, {\n      backgroundColor: theme.dark ? Color(theme.colors.surface).lighten(1.2).hex() : Color(theme.colors.surface).darken(0.1).hex()\n    }],\n    cursor: 'pointer'\n  }), React.createElement(View, {\n    style: [styles.line, {\n      backgroundColor: theme.colors.primary,\n      transform: [{\n        rotate: -90 + pointerNumber * degreesPerNumber + 'deg'\n      }, {\n        translateX: circleSize / 4 - 4 - dynamicSize / 2\n      }],\n      width: circleSize / 2 - 4 - dynamicSize\n    }],\n    pointerEvents: \"none\"\n  }, React.createElement(View, {\n    style: [styles.endPoint, {\n      backgroundColor: theme.colors.primary\n    }]\n  })), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.center],\n    pointerEvents: \"none\"\n  }, React.createElement(View, {\n    style: [styles.middlePoint, {\n      backgroundColor: theme.colors.primary\n    }]\n  })), React.createElement(AnimatedClockSwitcher, {\n    focused: focused,\n    hours: React.createElement(AnalogClockHours, {\n      is24Hour: is24Hour,\n      hours: hours\n    }),\n    minutes: React.createElement(AnalogClockMinutes, {\n      minutes: minutes\n    })\n  }));\n}\n\nvar styles = StyleSheet.create({\n  clock: {\n    height: circleSize,\n    width: circleSize,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: circleSize / 2\n  },\n  middlePoint: {\n    borderRadius: 4,\n    height: 8,\n    width: 8\n  },\n  center: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  endPoint: {\n    borderRadius: 15,\n    height: 30,\n    width: 30,\n    position: 'absolute',\n    right: 0,\n    bottom: -14\n  },\n  line: {\n    position: 'absolute',\n    marginBottom: -1,\n    height: 2,\n    borderRadius: 4\n  }\n});\n\nfunction returnTrue() {\n  return true;\n}\n\nexport default React.memo(AnalogClock);","map":{"version":3,"mappings":"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","names":["Color","useTheme","circleSize","clockTypes","getAngle","getHours","getHourType","getHourTypeFromOffset","getMinutes","hourTypes","React","useLatest","AnalogClockHours","AnimatedClockSwitcher","AnalogClockMinutes","DisplayModeContext","AnalogClock","hours","minutes","focused","is24Hour","onChange","theme","useContext","mode","shortPointer","clockRef","useRef","hoursRef","onChangeRef","minutesRef","focusedRef","is24HourRef","modeRef","onPointerMove","useCallback","e","final","x","nativeEvent","locationX","y","locationY","angle","current","hours24","previousHourType","pickedHours","hours12AndPm","hourTypeFromOffset","hours24AndPM","pm","undefined","pickedMinutes","panResponder","PanResponder","create","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onStartShouldSetPanResponder","returnTrue","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderTerminationRequest","onShouldBlockNativeResponder","dynamicSize","pointerNumber","degreesPerNumber","View","ref","panHandlers","style","styles","clock","backgroundColor","dark","colors","surface","lighten","hex","darken","cursor","line","primary","transform","rotate","translateX","width","pointerEvents","endPoint","StyleSheet","absoluteFill","center","middlePoint","height","position","justifyContent","alignItems","borderRadius","right","bottom","marginBottom","memo"],"sources":["AnalogClock.tsx"],"sourcesContent":["import Color from 'color'\nimport {\n  GestureResponderEvent,\n  PanResponder,\n  StyleSheet,\n  View,\n} from 'react-native'\nimport { useTheme } from 'react-native-paper'\nimport {\n  circleSize,\n  clockTypes,\n  getAngle,\n  getHours,\n  getHourType,\n  getHourTypeFromOffset,\n  getMinutes,\n  hourTypes,\n  PossibleClockTypes,\n} from './timeUtils'\nimport * as React from 'react'\nimport { useLatest } from '../utils'\nimport AnalogClockHours from './AnalogClockHours'\nimport AnimatedClockSwitcher from './AnimatedClockSwitcher'\nimport AnalogClockMinutes from './AnalogClockMinutes'\nimport { DisplayModeContext } from './TimePicker'\nfunction AnalogClock({\n  hours,\n  minutes,\n  focused,\n  is24Hour,\n  onChange,\n}: {\n  hours: number\n  minutes: number\n  focused: PossibleClockTypes\n  is24Hour: boolean\n  onChange: (hoursMinutesAndFocused: {\n    hours: number\n    minutes: number\n    focused?: undefined | PossibleClockTypes\n  }) => any\n}) {\n  const theme = useTheme()\n  const { mode } = React.useContext(DisplayModeContext)\n  // used to make pointer shorter if hours are selected and above 12\n  const shortPointer = (hours === 0 || hours > 12) && is24Hour\n  const clockRef = React.useRef<View | null>(null)\n  // Hooks are nice, sometimes... :-)..\n  // We need the latest values, since the onPointerMove uses a closure to the function\n  const hoursRef = useLatest(hours)\n  const onChangeRef = useLatest(onChange)\n  const minutesRef = useLatest(minutes)\n  const focusedRef = useLatest(focused)\n  const is24HourRef = useLatest(is24Hour)\n  const modeRef = useLatest(mode)\n  const onPointerMove = React.useCallback(\n    (e: GestureResponderEvent, final: boolean) => {\n      let x = e.nativeEvent.locationX\n      let y = e.nativeEvent.locationY\n      let angle = getAngle(x, y, circleSize)\n      if (focusedRef.current === clockTypes.hours) {\n        let hours24 = is24HourRef.current\n        let previousHourType = getHourType(hoursRef.current)\n        let pickedHours = getHours(angle, previousHourType)\n\n        let hours12AndPm = !hours24 && modeRef.current === 'AM'\n\n        let hourTypeFromOffset = getHourTypeFromOffset(x, y, circleSize)\n        let hours24AndPM = hours24 && hourTypeFromOffset === hourTypes.pm\n\n        // Avoiding the \"24h\"\n        // Should be 12h for 12 hours and PM mode\n\n        if (hours12AndPm || hours24AndPM) {\n          pickedHours += 12\n        }\n        if (modeRef.current === 'AM' && pickedHours === 12) {\n          pickedHours = 0\n        }\n\n        if (\n          (!hours24 && modeRef.current === 'AM' && pickedHours === 12) ||\n          pickedHours === 24\n        ) {\n          pickedHours = 0\n        }\n\n        if (hoursRef.current !== pickedHours || final) {\n          onChangeRef.current({\n            hours: pickedHours,\n            minutes: minutesRef.current,\n            focused: final ? clockTypes.minutes : undefined,\n          })\n        }\n      } else if (focusedRef.current === clockTypes.minutes) {\n        let pickedMinutes = getMinutes(angle)\n        if (minutesRef.current !== pickedMinutes) {\n          onChangeRef.current({\n            hours: hoursRef.current,\n            minutes: pickedMinutes,\n          })\n        }\n      }\n    },\n    [focusedRef, is24HourRef, hoursRef, onChangeRef, minutesRef, modeRef]\n  )\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onPanResponderGrant: (e) => onPointerMove(e, false),\n      onPanResponderMove: (e) => onPointerMove(e, false),\n      onPanResponderRelease: (e) => onPointerMove(e, true),\n      onStartShouldSetPanResponder: returnTrue,\n      onStartShouldSetPanResponderCapture: () => false,\n      onMoveShouldSetPanResponder: returnTrue,\n      onMoveShouldSetPanResponderCapture: returnTrue,\n      onPanResponderTerminationRequest: returnTrue,\n      onShouldBlockNativeResponder: returnTrue,\n    })\n  ).current\n  const dynamicSize = focused === clockTypes.hours && shortPointer ? 33 : 0\n  const pointerNumber = focused === clockTypes.hours ? hours : minutes\n  const degreesPerNumber = focused === clockTypes.hours ? 30 : 6\n  return (\n    <View\n      ref={clockRef}\n      {...panResponder.panHandlers}\n      style={[\n        styles.clock,\n        {\n          backgroundColor: theme.dark\n            ? Color(theme.colors.surface).lighten(1.2).hex()\n            : Color(theme.colors.surface).darken(0.1).hex(),\n        },\n      ]}\n      // @ts-ignore -> https://github.com/necolas/react-native-web/issues/506\n      cursor={'pointer'}\n    >\n      <View\n        style={[\n          styles.line,\n          {\n            backgroundColor: theme.colors.primary,\n            transform: [\n              { rotate: -90 + pointerNumber * degreesPerNumber + 'deg' },\n              {\n                translateX: circleSize / 4 - 4 - dynamicSize / 2,\n              },\n            ],\n            width: circleSize / 2 - 4 - dynamicSize,\n          },\n        ]}\n        pointerEvents=\"none\"\n      >\n        <View\n          style={[styles.endPoint, { backgroundColor: theme.colors.primary }]}\n        />\n      </View>\n      <View\n        style={[StyleSheet.absoluteFill, styles.center]}\n        pointerEvents=\"none\"\n      >\n        <View\n          style={[\n            styles.middlePoint,\n            {\n              backgroundColor: theme.colors.primary,\n            },\n          ]}\n        />\n      </View>\n      <AnimatedClockSwitcher\n        focused={focused}\n        hours={<AnalogClockHours is24Hour={is24Hour} hours={hours} />}\n        minutes={<AnalogClockMinutes minutes={minutes} />}\n      />\n    </View>\n  )\n}\nconst styles = StyleSheet.create({\n  clock: {\n    height: circleSize,\n    width: circleSize,\n    position: 'relative',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: circleSize / 2,\n  },\n  middlePoint: {\n    borderRadius: 4,\n    height: 8,\n    width: 8,\n  },\n  center: { justifyContent: 'center', alignItems: 'center' },\n  endPoint: {\n    borderRadius: 15,\n    height: 30,\n    width: 30,\n    position: 'absolute',\n    right: 0,\n    bottom: -14,\n  },\n  line: {\n    position: 'absolute',\n    marginBottom: -1,\n    height: 2,\n    borderRadius: 4,\n  },\n})\nfunction returnTrue() {\n  return true\n}\nexport default React.memo(AnalogClock)\n"]},"metadata":{},"sourceType":"module"}