{"ast":null,"code":"import * as React from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport { range } from \"../utils\";\nvar ITEM_HEIGHT = 62;\nexport default function YearPicker(_ref) {\n  var selectedYear = _ref.selectedYear,\n      selectingYear = _ref.selectingYear,\n      onPressYear = _ref.onPressYear,\n      startYear = _ref.startYear,\n      endYear = _ref.endYear;\n  var theme = useTheme();\n  var flatList = React.useRef(null);\n  var years = range(isNaN(startYear) ? 1800 : startYear, isNaN(endYear) ? 2200 : endYear);\n  React.useEffect(function () {\n    if (flatList.current && selectedYear) {\n      var indexToGo = selectedYear - startYear;\n      flatList.current.scrollToOffset({\n        offset: indexToGo / 3 * ITEM_HEIGHT - ITEM_HEIGHT,\n        animated: false\n      });\n    }\n  }, [flatList, selectedYear]);\n  return React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.root, {\n      backgroundColor: theme.colors.surface\n    }, selectingYear ? styles.opacity1 : styles.opacity0],\n    pointerEvents: selectingYear ? 'auto' : 'none'\n  }, React.createElement(FlatList, {\n    ref: flatList,\n    style: styles.list,\n    data: years,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Year, {\n        year: item,\n        selected: selectedYear === item,\n        onPressYear: onPressYear\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return \"\" + item;\n    },\n    numColumns: 3\n  }));\n}\n\nfunction YearPure(_ref3) {\n  var year = _ref3.year,\n      selected = _ref3.selected,\n      onPressYear = _ref3.onPressYear;\n  var theme = useTheme();\n  return React.createElement(View, {\n    style: styles.year\n  }, React.createElement(TouchableRipple, {\n    onPress: function onPress() {\n      return onPressYear(year);\n    },\n    accessibilityRole: \"button\",\n    accessibilityLabel: String(year),\n    style: styles.yearButton\n  }, React.createElement(View, {\n    style: [styles.yearInner, selected ? {\n      backgroundColor: theme.colors.primary\n    } : null]\n  }, React.createElement(Text, {\n    style: [styles.yearLabel, selected ? styles.selectedYear : null],\n    selectable: false\n  }, year))));\n}\n\nvar Year = React.memo(YearPure);\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    top: 56,\n    zIndex: 100\n  },\n  list: {\n    flex: 1\n  },\n  year: {\n    flex: 1,\n    marginLeft: 16,\n    marginRight: 16,\n    height: ITEM_HEIGHT,\n    justifyContent: 'center'\n  },\n  selectedYear: {\n    color: '#fff'\n  },\n  yearButton: {\n    borderRadius: 46 / 2,\n    overflow: 'hidden'\n  },\n  yearInner: {\n    borderRadius: 46 / 2,\n    height: 46,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  yearLabel: {\n    fontSize: 16\n  },\n  opacity0: {\n    opacity: 0\n  },\n  opacity1: {\n    opacity: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Text","TouchableRipple","useTheme","range","ITEM_HEIGHT","YearPicker","selectedYear","selectingYear","onPressYear","startYear","endYear","theme","flatList","useRef","years","isNaN","useEffect","current","indexToGo","scrollToOffset","offset","animated","View","style","StyleSheet","absoluteFill","styles","root","backgroundColor","colors","surface","opacity1","opacity0","pointerEvents","FlatList","ref","list","data","renderItem","item","Year","year","selected","keyExtractor","numColumns","YearPure","onPress","accessibilityRole","accessibilityLabel","String","yearButton","yearInner","primary","yearLabel","selectable","memo","create","flex","top","zIndex","marginLeft","marginRight","height","justifyContent","color","borderRadius","overflow","alignItems","fontSize","opacity"],"sources":["YearPicker.tsx"],"sourcesContent":["import * as React from 'react'\nimport { FlatList, StyleSheet, View } from 'react-native'\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper'\nimport { range } from '../utils'\n\nconst ITEM_HEIGHT = 62\n\nexport default function YearPicker({\n  selectedYear,\n  selectingYear,\n  onPressYear,\n  startYear,\n  endYear,\n}: {\n  selectedYear: number | undefined\n  selectingYear: boolean\n  onPressYear: (year: number) => any\n  startYear: number\n  endYear: number\n}) {\n  const theme = useTheme()\n  const flatList = React.useRef<FlatList<number> | null>(null)\n  const years = range(isNaN(startYear) ? 1800 : startYear, isNaN(endYear) ? 2200 : endYear)\n\n  // scroll to selected year\n  React.useEffect(() => {\n    if (flatList.current && selectedYear) {\n      const indexToGo = selectedYear - startYear\n      flatList.current.scrollToOffset({\n        offset: (indexToGo / 3) * ITEM_HEIGHT - ITEM_HEIGHT,\n        animated: false,\n      })\n    }\n  }, [flatList, selectedYear])\n\n  return (\n    <View\n      style={[\n        StyleSheet.absoluteFill,\n        styles.root,\n        { backgroundColor: theme.colors.surface },\n        selectingYear ? styles.opacity1 : styles.opacity0,\n      ]}\n      pointerEvents={selectingYear ? 'auto' : 'none'}\n    >\n      <FlatList<number>\n        ref={flatList}\n        style={styles.list}\n        data={years}\n        renderItem={({ item }) => (\n          <Year\n            year={item}\n            selected={selectedYear === item}\n            onPressYear={onPressYear}\n          />\n        )}\n        keyExtractor={(item) => `${item}`}\n        numColumns={3}\n      />\n    </View>\n  )\n}\n\nfunction YearPure({\n  year,\n  selected,\n  onPressYear,\n}: {\n  year: number\n  selected: boolean\n  onPressYear: (newYear: number) => any\n}) {\n  const theme = useTheme()\n  return (\n    <View style={styles.year}>\n      <TouchableRipple\n        onPress={() => onPressYear(year)}\n        accessibilityRole=\"button\"\n        accessibilityLabel={String(year)}\n        style={styles.yearButton}\n      >\n        <View\n          style={[\n            styles.yearInner,\n            selected ? { backgroundColor: theme.colors.primary } : null,\n          ]}\n        >\n          <Text\n            style={[styles.yearLabel, selected ? styles.selectedYear : null]}\n            selectable={false}\n          >\n            {year}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  )\n}\nconst Year = React.memo(YearPure)\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    top: 56,\n    zIndex: 100,\n  },\n\n  list: {\n    flex: 1,\n  },\n  year: {\n    flex: 1,\n    marginLeft: 16,\n    marginRight: 16,\n    height: ITEM_HEIGHT,\n    justifyContent: 'center',\n  },\n  selectedYear: { color: '#fff' },\n  yearButton: {\n    borderRadius: 46 / 2,\n    overflow: 'hidden',\n  },\n  yearInner: {\n    borderRadius: 46 / 2,\n    height: 46,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  yearLabel: {\n    fontSize: 16,\n  },\n  opacity0: {\n    opacity: 0,\n  },\n  opacity1: {\n    opacity: 1,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}