{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text } from 'react-native-paper';\nimport { circleSize } from \"./timeUtils\";\nimport { useTextColorOnPrimary } from \"../utils\";\nimport { DisplayModeContext } from \"./TimePicker\";\n\nfunction AnalogClockHours(_ref) {\n  var is24Hour = _ref.is24Hour,\n      hours = _ref.hours;\n\n  var _React$useContext = React.useContext(DisplayModeContext),\n      mode = _React$useContext.mode;\n\n  var outerRange = getHourNumbers(false, circleSize, 12, 12);\n  var innerRange = getHourNumbers(true, circleSize, 12, 12);\n  var color = useTextColorOnPrimary();\n  return React.createElement(React.Fragment, null, outerRange.map(function (a, i) {\n    return React.createElement(View, {\n      key: i,\n      pointerEvents: \"none\",\n      style: [styles.outerHourRoot, {\n        top: a[1] || 0,\n        left: a[0] || 0\n      }]\n    }, React.createElement(View, {\n      style: styles.outerHourInner\n    }, React.createElement(Text, {\n      style: hours === i + 1 ? {\n        color: color\n      } : null,\n      selectable: false\n    }, mode === 'AM' && !is24Hour && i + 1 === 12 ? '00' : i + 1)));\n  }), is24Hour ? innerRange.map(function (a, i) {\n    return React.createElement(View, {\n      key: i,\n      pointerEvents: \"none\",\n      style: [styles.innerHourRoot, {\n        top: a[1] || 0,\n        left: a[0] || 0\n      }]\n    }, React.createElement(View, {\n      style: styles.innerHourInner\n    }, React.createElement(Text, {\n      selectable: false,\n      style: [styles.innerHourText, i + 13 === hours || i + 13 === 24 && hours === 0 ? {\n        color: color\n      } : null]\n    }, i + 13 === 24 ? '00' : i + 13)));\n  }) : null);\n}\n\nvar styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n    borderRadius: 25\n  },\n  outerHourInner: {\n    borderRadius: 25\n  },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20\n  },\n  innerHourInner: {\n    borderRadius: 20\n  },\n  innerHourText: {\n    fontSize: 13\n  }\n});\n\nfunction getHourNumbers(is24Hour, size, count, arrayLength) {\n  var angle = 0;\n  var step = 2 * Math.PI / count;\n  var radius = size / (is24Hour ? 4 : 2.5);\n  angle = -90 * Math.PI / 180 + Math.PI / 6;\n  return Array(arrayLength).fill(true).map(function () {\n    var x = Math.round(size / 2 + radius * Math.cos(angle));\n    var y = Math.round(size / 2 + radius * Math.sin(angle));\n    angle += step;\n    return [x, y];\n  });\n}\n\nexport default React.memo(AnalogClockHours);","map":{"version":3,"mappings":"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","names":["React","Text","circleSize","useTextColorOnPrimary","DisplayModeContext","AnalogClockHours","is24Hour","hours","useContext","mode","outerRange","getHourNumbers","innerRange","color","map","a","i","View","key","pointerEvents","style","styles","outerHourRoot","top","left","outerHourInner","selectable","innerHourRoot","innerHourInner","innerHourText","StyleSheet","create","position","justifyContent","alignItems","zIndex","width","height","marginLeft","marginTop","borderRadius","fontSize","size","count","arrayLength","angle","step","Math","PI","radius","Array","fill","x","round","cos","y","sin","memo"],"sources":["AnalogClockHours.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { circleSize } from './timeUtils'\nimport { useTextColorOnPrimary } from '../utils'\nimport { DisplayModeContext } from './TimePicker'\n\nfunction AnalogClockHours({\n  is24Hour,\n  hours,\n}: {\n  is24Hour: boolean\n  hours: number\n}) {\n  const { mode } = React.useContext(DisplayModeContext)\n  const outerRange = getHourNumbers(false, circleSize, 12, 12)\n  const innerRange = getHourNumbers(true, circleSize, 12, 12)\n  const color = useTextColorOnPrimary()\n\n  return (\n    <>\n      {outerRange.map((a, i) => (\n        <View\n          key={i}\n          pointerEvents=\"none\"\n          style={[\n            styles.outerHourRoot,\n            {\n              top: a[1] || 0,\n              left: a[0] || 0,\n            },\n          ]}\n        >\n          <View style={styles.outerHourInner}>\n            {/* Display 00 instead of 12 for AM hours */}\n            <Text style={hours === i + 1 ? { color } : null} selectable={false}>\n              {mode === 'AM' && !is24Hour && i + 1 === 12 ? '00' : i + 1}\n            </Text>\n          </View>\n        </View>\n      ))}\n      {is24Hour\n        ? innerRange.map((a, i) => (\n            <View\n              key={i}\n              pointerEvents=\"none\"\n              style={[\n                styles.innerHourRoot,\n                {\n                  top: a[1] || 0,\n                  left: a[0] || 0,\n                },\n              ]}\n            >\n              <View style={styles.innerHourInner}>\n                <Text\n                  selectable={false}\n                  style={[\n                    styles.innerHourText,\n                    i + 13 === hours || (i + 13 === 24 && hours === 0)\n                      ? { color }\n                      : null,\n                  ]}\n                >\n                  {i + 13 === 24 ? '00' : i + 13}\n                </Text>\n              </View>\n            </View>\n          ))\n        : null}\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n\n    borderRadius: 25,\n  },\n  outerHourInner: { borderRadius: 25 },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20,\n  },\n  innerHourInner: { borderRadius: 20 },\n  innerHourText: { fontSize: 13 },\n})\n\nfunction getHourNumbers(\n  is24Hour: boolean,\n  size: number,\n  count: number,\n  arrayLength: number\n) {\n  let angle = 0\n  let step = (2 * Math.PI) / count\n  let radius = size / (is24Hour ? 4 : 2.5)\n\n  angle = (-90 * Math.PI) / 180 + Math.PI / 6\n\n  return Array(arrayLength)\n    .fill(true)\n    .map(() => {\n      let x = Math.round(size / 2 + radius * Math.cos(angle))\n      let y = Math.round(size / 2 + radius * Math.sin(angle))\n      angle += step\n      return [x, y]\n    })\n}\n\nexport default React.memo(AnalogClockHours)\n"]},"metadata":{},"sourceType":"module"}