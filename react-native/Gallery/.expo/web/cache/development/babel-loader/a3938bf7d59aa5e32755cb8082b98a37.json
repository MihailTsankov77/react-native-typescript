{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nexport default function AutoSizer(_ref) {\n  var children = _ref.children;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var onLayout = React.useCallback(function (event) {\n    var nl = event.nativeEvent.layout;\n\n    if (!layout || layout.width !== nl.width || layout.height !== nl.height) {\n      setLayout({\n        width: nl.width,\n        height: nl.height\n      });\n    }\n  }, [layout, setLayout]);\n  return React.createElement(View, {\n    style: [styles.autoSizer, layout && layout],\n    onLayout: onLayout\n  }, layout ? children(layout) : null);\n}\nvar styles = StyleSheet.create({\n  autoSizer: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAQA,eAAe,SAASC,SAAT,OAIZ;EAAA,IAHDC,QAGC,QAHDA,QAGC;;EACD,sBAA4BF,KAAK,CAACG,QAANH,CAAsC,IAAtCA,CAA5B;EAAA;EAAA,IAAOI,MAAP;EAAA,IAAeC,SAAf;;EACA,IAAMC,QAAQ,GAAGN,KAAK,CAACO,WAANP,CACdQ,eAAD,EAA8B;IAC5B,IAAMC,EAAE,GAAGD,KAAK,CAACE,WAANF,CAAkBJ,MAA7B;;IAGA,IAAI,CAACA,MAAD,IAAWA,MAAM,CAACO,KAAPP,KAAiBK,EAAE,CAACE,KAA/B,IAAwCP,MAAM,CAACQ,MAAPR,KAAkBK,EAAE,CAACG,MAAjE,EAAyE;MACvEP,SAAS,CAAC;QAAEM,KAAK,EAAEF,EAAE,CAACE,KAAZ;QAAmBC,MAAM,EAAEH,EAAE,CAACG;MAA9B,CAAD,CAATP;IACD;EAPY,GASf,CAACD,MAAD,EAASC,SAAT,CATeL,CAAjB;EAWA,OACEA,oBAACa,IAAD;IAAMC,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmBZ,MAAM,IAAIA,MAA7B,CAAb;IAAmDE,QAAQ,EAAEA;EAA7D,GACGF,MAAM,GAAGF,QAAQ,CAACE,MAAD,CAAX,GAAsB,IAD/B,CADF;AAKD;AAED,IAAMW,MAAM,GAAGE,UAAU,CAACC,MAAXD,CAAkB;EAC/BD,SAAS,EAAE;IACTG,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD;AADoB,CAAlBH,CAAf","names":["React","AutoSizer","children","useState","layout","setLayout","onLayout","useCallback","event","nl","nativeEvent","width","height","View","style","styles","autoSizer","StyleSheet","create","flex","overflow"],"sources":["AutoSizer.tsx"],"sourcesContent":["import * as React from 'react'\nimport { LayoutChangeEvent, StyleSheet, View } from 'react-native'\n\ntype WidthAndHeight = {\n  width: number\n  height: number\n}\n\nexport default function AutoSizer({\n  children,\n}: {\n  children: ({ width, height }: WidthAndHeight) => any\n}) {\n  const [layout, setLayout] = React.useState<WidthAndHeight | null>(null)\n  const onLayout = React.useCallback(\n    (event: LayoutChangeEvent) => {\n      const nl = event.nativeEvent.layout\n\n      // https://github.com/necolas/react-native-web/issues/1704\n      if (!layout || layout.width !== nl.width || layout.height !== nl.height) {\n        setLayout({ width: nl.width, height: nl.height })\n      }\n    },\n    [layout, setLayout]\n  )\n  return (\n    <View style={[styles.autoSizer, layout && layout]} onLayout={onLayout}>\n      {layout ? children(layout) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  autoSizer: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}