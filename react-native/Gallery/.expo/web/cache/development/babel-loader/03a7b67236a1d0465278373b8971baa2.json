{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text } from 'react-native-paper';\nimport { circleSize } from \"./timeUtils\";\nimport { useTextColorOnPrimary } from \"../utils\";\n\nfunction AnalogClockMinutes(_ref) {\n  var minutes = _ref.minutes;\n  var range = getMinuteNumbers(circleSize, 12);\n  var color = useTextColorOnPrimary();\n  return React.createElement(React.Fragment, null, range.map(function (a, i) {\n    var currentMinutes = i * 5;\n    var isZero = currentMinutes === 0;\n    var isCurrent = currentMinutes - 1 <= minutes && currentMinutes + 1 >= minutes;\n\n    if (isZero) {\n      isCurrent = minutes >= 59 || currentMinutes + 1 >= minutes;\n    }\n\n    return React.createElement(View, {\n      key: i,\n      pointerEvents: \"none\",\n      style: [styles.outerHourRoot, {\n        top: a[1] || 0,\n        left: a[0] || 0\n      }]\n    }, React.createElement(View, {\n      style: styles.outerHourInner\n    }, React.createElement(Text, {\n      style: isCurrent ? {\n        color: color\n      } : undefined,\n      selectable: false\n    }, isZero ? '00' : currentMinutes)));\n  }));\n}\n\nvar styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n    borderRadius: 25\n  },\n  outerHourInner: {\n    borderRadius: 25\n  },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20\n  },\n  innerHourInner: {\n    borderRadius: 20\n  },\n  innerHourText: {\n    fontSize: 13\n  },\n  textWhite: {\n    color: '#fff'\n  }\n});\n\nfunction getMinuteNumbers(size, count) {\n  var angle = 0;\n  var step = 2 * Math.PI / count;\n  var radius = size / 2.5;\n  angle = angle = -90 * Math.PI / 180;\n  return Array(12).fill(true).map(function () {\n    var x = Math.round(size / 2 + radius * Math.cos(angle));\n    var y = Math.round(size / 2 + radius * Math.sin(angle));\n    angle += step;\n    return [x, y];\n  });\n}\n\nexport default React.memo(AnalogClockMinutes);","map":{"version":3,"mappings":"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","names":["React","Text","circleSize","useTextColorOnPrimary","AnalogClockMinutes","minutes","range","getMinuteNumbers","color","map","a","i","currentMinutes","isZero","isCurrent","View","key","pointerEvents","style","styles","outerHourRoot","top","left","outerHourInner","undefined","selectable","StyleSheet","create","position","justifyContent","alignItems","zIndex","width","height","marginLeft","marginTop","borderRadius","innerHourRoot","innerHourInner","innerHourText","fontSize","textWhite","size","count","angle","step","Math","PI","radius","Array","fill","x","round","cos","y","sin","memo"],"sources":["AnalogClockMinutes.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { circleSize } from './timeUtils'\nimport { useTextColorOnPrimary } from '../utils'\n\nfunction AnalogClockMinutes({ minutes }: { minutes: number }) {\n  const range = getMinuteNumbers(circleSize, 12)\n  const color = useTextColorOnPrimary()\n  return (\n    <>\n      {range.map((a, i) => {\n        const currentMinutes = i * 5\n        const isZero = currentMinutes === 0\n        let isCurrent =\n          currentMinutes - 1 <= minutes && currentMinutes + 1 >= minutes\n        if (isZero) {\n          isCurrent = minutes >= 59 || currentMinutes + 1 >= minutes\n        }\n        return (\n          <View\n            key={i}\n            pointerEvents=\"none\"\n            style={[\n              styles.outerHourRoot,\n              {\n                top: a[1] || 0,\n                left: a[0] || 0,\n              },\n            ]}\n          >\n            <View style={styles.outerHourInner}>\n              <Text\n                style={isCurrent ? { color } : undefined}\n                selectable={false}\n              >\n                {isZero ? '00' : currentMinutes}\n              </Text>\n            </View>\n          </View>\n        )\n      })}\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n\n    borderRadius: 25,\n  },\n  outerHourInner: { borderRadius: 25 },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20,\n  },\n  innerHourInner: { borderRadius: 20 },\n  innerHourText: { fontSize: 13 },\n  textWhite: { color: '#fff' },\n})\n\nfunction getMinuteNumbers(size: number, count: number) {\n  let angle = 0\n  let step = (2 * Math.PI) / count\n  let radius = size / 2.5\n\n  angle = angle = (-90 * Math.PI) / 180\n\n  return Array(12)\n    .fill(true)\n    .map(() => {\n      let x = Math.round(size / 2 + radius * Math.cos(angle))\n      let y = Math.round(size / 2 + radius * Math.sin(angle))\n      angle += step\n      return [x, y]\n    })\n}\n\nexport default React.memo(AnalogClockMinutes)\n"]},"metadata":{},"sourceType":"module"}