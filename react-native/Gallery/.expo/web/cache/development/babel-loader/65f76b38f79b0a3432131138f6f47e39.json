{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { useTheme } from 'react-native-paper';\nimport { clockTypes, toHourInputFormat, toHourOutputFormat } from \"./timeUtils\";\nimport TimeInput from \"./TimeInput\";\nimport AmPmSwitcher from \"./AmPmSwitcher\";\nimport { useLatest } from \"../utils\";\n\nfunction TimeInputs(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      onFocusInput = _ref.onFocusInput,\n      focused = _ref.focused,\n      inputType = _ref.inputType,\n      onChange = _ref.onChange,\n      is24Hour = _ref.is24Hour;\n  var startInput = React.useRef(null);\n  var endInput = React.useRef(null);\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var theme = useTheme();\n  var onSubmitStartInput = React.useCallback(function () {\n    if (endInput.current) {\n      endInput.current.focus();\n    }\n  }, [endInput]);\n  var onSubmitEndInput = React.useCallback(function () {}, []);\n  var minutesRef = useLatest(minutes);\n  var onChangeHours = React.useCallback(function (newHours) {\n    onChange({\n      hours: newHours,\n      minutes: minutesRef.current,\n      focused: clockTypes.hours\n    });\n  }, [onChange, minutesRef]);\n  return React.createElement(View, {\n    style: [styles.inputContainer, isLandscape && styles.inputContainerLandscape]\n  }, React.createElement(TimeInput, {\n    ref: startInput,\n    placeholder: '00',\n    value: toHourInputFormat(hours, is24Hour),\n    clockType: clockTypes.hours,\n    pressed: focused === clockTypes.hours,\n    onPress: onFocusInput,\n    inputType: inputType,\n    returnKeyType: 'next',\n    onSubmitEditing: onSubmitStartInput,\n    blurOnSubmit: false,\n    onChanged: function onChanged(newHoursFromInput) {\n      var newHours = toHourOutputFormat(newHoursFromInput, hours, is24Hour);\n\n      if (newHoursFromInput > 24) {\n        newHours = 24;\n      }\n\n      onChange({\n        hours: newHours,\n        minutes: minutes\n      });\n    }\n  }), React.createElement(View, {\n    style: styles.hoursAndMinutesSeparator\n  }, React.createElement(View, {\n    style: styles.spaceDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.betweenDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.spaceDot\n  })), React.createElement(TimeInput, {\n    ref: endInput,\n    placeholder: '00',\n    value: minutes,\n    clockType: clockTypes.minutes,\n    pressed: focused === clockTypes.minutes,\n    onPress: onFocusInput,\n    inputType: inputType,\n    onSubmitEditing: onSubmitEndInput,\n    onChanged: function onChanged(newMinutesFromInput) {\n      var newMinutes = newMinutesFromInput;\n\n      if (newMinutesFromInput > 59) {\n        newMinutes = 59;\n      }\n\n      onChange({\n        hours: hours,\n        minutes: newMinutes\n      });\n    }\n  }), !is24Hour && React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.spaceBetweenInputsAndSwitcher\n  }), React.createElement(AmPmSwitcher, {\n    hours: hours,\n    onChange: onChangeHours\n  })));\n}\n\nvar styles = StyleSheet.create({\n  spaceBetweenInputsAndSwitcher: {\n    width: 12\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  inputContainerLandscape: {\n    flex: 1\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center'\n  },\n  spaceDot: {\n    flex: 1\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2\n  },\n  betweenDot: {\n    height: 12\n  }\n});\nexport default React.memo(TimeInputs);","map":{"version":3,"mappings":"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","names":["React","useTheme","clockTypes","toHourInputFormat","toHourOutputFormat","TimeInput","AmPmSwitcher","useLatest","TimeInputs","hours","minutes","onFocusInput","focused","inputType","onChange","is24Hour","startInput","useRef","endInput","dimensions","useWindowDimensions","isLandscape","width","height","theme","onSubmitStartInput","useCallback","current","focus","onSubmitEndInput","minutesRef","onChangeHours","newHours","View","style","styles","inputContainer","inputContainerLandscape","ref","placeholder","value","clockType","pressed","onPress","returnKeyType","onSubmitEditing","blurOnSubmit","onChanged","newHoursFromInput","hoursAndMinutesSeparator","spaceDot","dot","backgroundColor","colors","text","betweenDot","newMinutesFromInput","newMinutes","spaceBetweenInputsAndSwitcher","StyleSheet","create","flexDirection","alignItems","flex","fontSize","borderRadius","memo"],"sources":["TimeInputs.tsx"],"sourcesContent":["// @typescript-eslint/no-unused-vars\n// WORK IN PROGRESS\n\nimport * as React from 'react'\nimport {\n  View,\n  StyleSheet,\n  useWindowDimensions,\n  TextInput as TextInputNative,\n} from 'react-native'\nimport { useTheme } from 'react-native-paper'\n\nimport {\n  clockTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\nimport TimeInput from './TimeInput'\nimport AmPmSwitcher from './AmPmSwitcher'\nimport { useLatest } from '../utils'\n\nfunction TimeInputs({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  is24Hour,\n}: {\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: (hoursMinutesAndFocused: {\n    hours: number\n    minutes: number\n    focused?: undefined | PossibleClockTypes\n  }) => any\n  is24Hour: boolean\n}) {\n  const startInput = React.useRef<TextInputNative | null>(null)\n  const endInput = React.useRef<TextInputNative | null>(null)\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n  const theme = useTheme()\n\n  const onSubmitStartInput = React.useCallback(() => {\n    if (endInput.current) {\n      endInput.current.focus()\n    }\n  }, [endInput])\n\n  const onSubmitEndInput = React.useCallback(() => {\n    // TODO: close modal and persist time\n  }, [])\n\n  const minutesRef = useLatest(minutes)\n  const onChangeHours = React.useCallback(\n    (newHours: number) => {\n      onChange({\n        hours: newHours,\n        minutes: minutesRef.current,\n        focused: clockTypes.hours,\n      })\n    },\n    [onChange, minutesRef]\n  )\n\n  return (\n    <View\n      style={[\n        styles.inputContainer,\n        isLandscape && styles.inputContainerLandscape,\n      ]}\n    >\n      <TimeInput\n        ref={startInput}\n        placeholder={'00'}\n        value={toHourInputFormat(hours, is24Hour)}\n        clockType={clockTypes.hours}\n        pressed={focused === clockTypes.hours}\n        onPress={onFocusInput}\n        inputType={inputType}\n        returnKeyType={'next'}\n        onSubmitEditing={onSubmitStartInput}\n        blurOnSubmit={false}\n        onChanged={(newHoursFromInput) => {\n          let newHours = toHourOutputFormat(newHoursFromInput, hours, is24Hour)\n          if (newHoursFromInput > 24) {\n            newHours = 24\n          }\n          onChange({\n            hours: newHours,\n            minutes,\n          })\n        }}\n        // onChangeText={onChangeStartInput}\n      />\n      <View style={styles.hoursAndMinutesSeparator}>\n        <View style={styles.spaceDot} />\n        <View style={[styles.dot, { backgroundColor: theme.colors.text }]} />\n        <View style={styles.betweenDot} />\n        <View style={[styles.dot, { backgroundColor: theme.colors.text }]} />\n        <View style={styles.spaceDot} />\n      </View>\n      <TimeInput\n        ref={endInput}\n        placeholder={'00'}\n        value={minutes}\n        clockType={clockTypes.minutes}\n        pressed={focused === clockTypes.minutes}\n        onPress={onFocusInput}\n        inputType={inputType}\n        onSubmitEditing={onSubmitEndInput}\n        onChanged={(newMinutesFromInput) => {\n          let newMinutes = newMinutesFromInput\n          if (newMinutesFromInput > 59) {\n            newMinutes = 59\n          }\n          onChange({\n            hours,\n            minutes: newMinutes,\n          })\n        }}\n      />\n      {!is24Hour && (\n        <>\n          <View style={styles.spaceBetweenInputsAndSwitcher} />\n          <AmPmSwitcher hours={hours} onChange={onChangeHours} />\n        </>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  spaceBetweenInputsAndSwitcher: { width: 12 },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  inputContainerLandscape: {\n    flex: 1,\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center',\n  },\n  spaceDot: {\n    flex: 1,\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2,\n  },\n  betweenDot: {\n    height: 12,\n  },\n})\n\nexport default React.memo(TimeInputs)\n"]},"metadata":{},"sourceType":"module"}