{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Swiper from \"./Swiper\";\nimport Month from \"./Month\";\nimport { areDatesOnSameDay, dateToUnix, getEndOfDay, getInitialIndex } from \"./dateUtils\";\nimport CalendarHeader from \"./CalendarHeader\";\nimport { useCallback, useMemo } from 'react';\nimport YearPicker from \"./YearPicker\";\nimport Color from 'color';\nimport { useTheme } from 'react-native-paper';\nimport { useLatest, lightenBy, darkenBy } from \"../utils\";\n\nfunction Calendar(props) {\n  var locale = props.locale,\n      mode = props.mode,\n      onChange = props.onChange,\n      startDate = props.startDate,\n      endDate = props.endDate,\n      date = props.date,\n      disableWeekDays = props.disableWeekDays,\n      startYear = props.startYear,\n      endYear = props.endYear,\n      dates = props.dates,\n      validRange = props.validRange,\n      dateMode = props.dateMode;\n  var theme = useTheme();\n  var selectColor = useMemo(function () {\n    if (theme.dark) {\n      return darkenBy(Color(theme.colors.primary), 0.9).hex();\n    }\n\n    return lightenBy(Color(theme.colors.primary), 0.9).hex();\n  }, [theme]);\n  var scrollMode = mode === 'range' || mode === 'multiple' ? 'vertical' : 'horizontal';\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedYear = _React$useState2[0],\n      setSelectedYear = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      selectingYear = _React$useState4[0],\n      setSelectingYear = _React$useState4[1];\n\n  var onPressYear = useCallback(function (year) {\n    setSelectedYear(year);\n    setSelectingYear(function (prev) {\n      return !prev;\n    });\n  }, [setSelectingYear]);\n  var startDateRef = useLatest(startDate);\n  var endDateRef = useLatest(endDate);\n  var onChangeRef = useLatest(onChange);\n  var datesRef = useLatest(dates);\n  var onPressDate = useCallback(function (d) {\n    if (mode === 'single') {\n      ;\n      onChangeRef.current({\n        date: dateMode === 'start' ? d : getEndOfDay(d)\n      });\n    } else if (mode === 'range') {\n      var sd = startDateRef.current;\n      var ed = endDateRef.current;\n      var isStart = true;\n\n      if (sd && !ed && dateToUnix(d) >= dateToUnix(sd)) {\n        isStart = false;\n      }\n\n      ;\n      onChangeRef.current({\n        startDate: isStart ? d : sd,\n        endDate: !isStart ? getEndOfDay(d) : undefined\n      });\n    } else if (mode === 'multiple') {\n      datesRef.current = datesRef.current || [];\n      var exists = datesRef.current.some(function (ed) {\n        return areDatesOnSameDay(ed, d);\n      });\n      var newDates = exists ? datesRef.current.filter(function (ed) {\n        return !areDatesOnSameDay(ed, d);\n      }) : [].concat(_toConsumableArray(datesRef.current), [d]);\n      newDates.sort(function (a, b) {\n        return a.getTime() - b.getTime();\n      });\n      onChangeRef.current({\n        dates: newDates,\n        datePressed: d,\n        change: exists ? 'removed' : 'added'\n      });\n    }\n  }, [mode, dateMode, onChangeRef, startDateRef, endDateRef, datesRef]);\n  var firstDate = startDate || date || (dates === null || dates === void 0 ? void 0 : dates[0]);\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(Swiper, {\n    initialIndex: getInitialIndex(firstDate),\n    selectedYear: selectedYear,\n    scrollMode: scrollMode,\n    renderItem: function renderItem(_ref) {\n      var index = _ref.index;\n      return React.createElement(Month, {\n        locale: locale,\n        mode: mode,\n        key: index,\n        validRange: validRange,\n        index: index,\n        startDate: startDate,\n        endDate: endDate,\n        date: date,\n        dates: dates,\n        onPressYear: onPressYear,\n        selectingYear: selectingYear,\n        onPressDate: onPressDate,\n        scrollMode: scrollMode,\n        primaryColor: theme.colors.primary,\n        selectColor: selectColor,\n        roundness: theme.roundness,\n        disableWeekDays: disableWeekDays\n      });\n    },\n    renderHeader: function renderHeader(_ref2) {\n      var onPrev = _ref2.onPrev,\n          onNext = _ref2.onNext;\n      return React.createElement(CalendarHeader, {\n        locale: locale,\n        onPrev: onPrev,\n        onNext: onNext,\n        scrollMode: scrollMode,\n        disableWeekDays: disableWeekDays\n      });\n    }\n  }), scrollMode === 'horizontal' ? React.createElement(YearPicker, {\n    selectedYear: selectedYear,\n    selectingYear: selectingYear,\n    onPressYear: onPressYear,\n    startYear: startYear != null ? startYear : 1800,\n    endYear: endYear != null ? endYear : 2200\n  }) : null);\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    flex: 1\n  },\n  viewPager: {\n    flex: 1\n  }\n});\nexport default React.memo(Calendar);","map":{"version":3,"mappings":"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","names":["React","Swiper","Month","areDatesOnSameDay","dateToUnix","getEndOfDay","getInitialIndex","CalendarHeader","useCallback","useMemo","YearPicker","Color","useTheme","useLatest","lightenBy","darkenBy","Calendar","props","locale","mode","onChange","startDate","endDate","date","disableWeekDays","startYear","endYear","dates","validRange","dateMode","theme","selectColor","dark","colors","primary","hex","scrollMode","useState","undefined","selectedYear","setSelectedYear","selectingYear","setSelectingYear","onPressYear","year","prev","startDateRef","endDateRef","onChangeRef","datesRef","onPressDate","d","current","sd","ed","isStart","exists","some","newDates","filter","sort","a","b","getTime","datePressed","change","firstDate","View","style","styles","root","initialIndex","renderItem","index","key","primaryColor","roundness","renderHeader","onPrev","onNext","StyleSheet","create","flex","viewPager","memo"],"sources":["Calendar.tsx"],"sourcesContent":["import * as React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport Swiper from './Swiper'\nimport Month from './Month'\nimport {\n  areDatesOnSameDay,\n  dateToUnix,\n  DisableWeekDaysType,\n  getEndOfDay,\n  getInitialIndex,\n} from './dateUtils'\n\nimport CalendarHeader from './CalendarHeader'\nimport { useCallback, useMemo } from 'react'\nimport YearPicker from './YearPicker'\nimport Color from 'color'\nimport { useTheme } from 'react-native-paper'\nimport { useLatest, lightenBy, darkenBy } from '../utils'\n\nexport type ModeType = 'single' | 'range' | 'multiple'\n\nexport type ScrollModeType = 'horizontal' | 'vertical'\n\nexport type ValidRangeType = {\n  startDate?: Date\n  endDate?: Date\n  disabledDates?: Date[]\n}\n\nexport type BaseCalendarProps = {\n  locale: string\n  disableWeekDays?: DisableWeekDaysType\n  validRange?: ValidRangeType\n  startYear?: number\n  endYear?: number\n\n  // here they are optional but in final implemenation they are required\n  date?: CalendarDate\n  dates?: CalendarDates\n  startDate?: CalendarDate\n  endDate?: CalendarDate\n  dateMode?: 'start' | 'end'\n}\n\nexport type CalendarDate = Date | undefined\nexport type CalendarDates = Date[] | undefined | null\n\nexport type RangeChange = (params: {\n  startDate: CalendarDate\n  endDate: CalendarDate\n}) => any\n\nexport type SingleChange = (params: { date: CalendarDate }) => void\n\nexport type MultiChange = (params: {\n  dates: CalendarDates\n  datePressed: Date\n  change: 'added' | 'removed'\n}) => any\n\nexport type MultiConfirm = (params: { dates: Date[] }) => void\n\nexport interface CalendarSingleProps extends BaseCalendarProps {\n  mode: 'single'\n  date: CalendarDate\n  onChange: SingleChange\n}\n\nexport interface CalendarRangeProps extends BaseCalendarProps {\n  mode: 'range'\n  startDate: CalendarDate\n  endDate: CalendarDate\n  onChange: RangeChange\n}\n\nexport interface CalendarMultiProps extends BaseCalendarProps {\n  mode: 'multiple'\n  dates: CalendarDates\n  onChange: MultiChange\n}\n\nfunction Calendar(\n  props: CalendarSingleProps | CalendarRangeProps | CalendarMultiProps\n) {\n  const {\n    locale,\n    mode,\n    onChange,\n    startDate,\n    endDate,\n    date,\n    disableWeekDays,\n    startYear,\n    endYear,\n    dates,\n    validRange,\n    dateMode,\n  } = props\n\n  const theme = useTheme()\n\n  const selectColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return darkenBy(Color(theme.colors.primary), 0.9).hex()\n    }\n    return lightenBy(Color(theme.colors.primary), 0.9).hex()\n  }, [theme])\n\n  const scrollMode =\n    mode === 'range' || mode === 'multiple' ? 'vertical' : 'horizontal'\n\n  const [selectedYear, setSelectedYear] = React.useState<number | undefined>(\n    undefined\n  )\n  const [selectingYear, setSelectingYear] = React.useState<boolean>(false)\n  const onPressYear = useCallback(\n    (year: number) => {\n      setSelectedYear(year)\n      setSelectingYear((prev) => !prev)\n    },\n    [setSelectingYear]\n  )\n\n  // prevent re-rendering all months when something changed we only need the\n  // latest version of the props and we don't want the useCallback to change\n  const startDateRef = useLatest<CalendarDate>(startDate)\n  const endDateRef = useLatest<CalendarDate>(endDate)\n  const onChangeRef = useLatest<RangeChange | SingleChange | MultiChange>(\n    onChange\n  )\n  const datesRef = useLatest<CalendarDates>(dates)\n\n  const onPressDate = useCallback(\n    (d: Date) => {\n      if (mode === 'single') {\n        ;(onChangeRef.current as SingleChange)({\n          date: dateMode === 'start' ? d : getEndOfDay(d),\n        })\n      } else if (mode === 'range') {\n        const sd = startDateRef.current\n        const ed = endDateRef.current\n        let isStart: boolean = true\n        if (sd && !ed && dateToUnix(d) >= dateToUnix(sd!)) {\n          isStart = false\n        }\n        ;(onChangeRef.current as RangeChange)({\n          startDate: isStart ? d : sd,\n          endDate: !isStart ? getEndOfDay(d) : undefined,\n        })\n      } else if (mode === 'multiple') {\n        datesRef.current = datesRef.current || []\n        const exists = datesRef.current.some((ed) => areDatesOnSameDay(ed, d))\n\n        const newDates = exists\n          ? datesRef.current.filter((ed) => !areDatesOnSameDay(ed, d))\n          : [...datesRef.current, d]\n\n        newDates.sort((a, b) => a.getTime() - b.getTime())\n        ;(onChangeRef.current as MultiChange)({\n          dates: newDates,\n          datePressed: d,\n          change: exists ? 'removed' : 'added',\n        })\n      }\n    },\n    [mode, dateMode, onChangeRef, startDateRef, endDateRef, datesRef]\n  )\n\n  const firstDate = startDate || date || dates?.[0]\n\n  return (\n    <View style={styles.root}>\n      <Swiper\n        initialIndex={getInitialIndex(firstDate)}\n        selectedYear={selectedYear}\n        scrollMode={scrollMode}\n        renderItem={({ index }) => (\n          <Month\n            locale={locale}\n            mode={mode}\n            key={index}\n            validRange={validRange}\n            index={index}\n            startDate={startDate}\n            endDate={endDate}\n            date={date}\n            dates={dates}\n            onPressYear={onPressYear}\n            selectingYear={selectingYear}\n            onPressDate={onPressDate}\n            scrollMode={scrollMode}\n            primaryColor={theme.colors.primary}\n            selectColor={selectColor}\n            roundness={theme.roundness}\n            disableWeekDays={disableWeekDays}\n          />\n        )}\n        renderHeader={({ onPrev, onNext }) => (\n          <CalendarHeader\n            locale={locale}\n            onPrev={onPrev}\n            onNext={onNext}\n            scrollMode={scrollMode}\n            disableWeekDays={disableWeekDays}\n          />\n        )}\n      />\n      {scrollMode === 'horizontal' ? (\n        <YearPicker\n          selectedYear={selectedYear}\n          selectingYear={selectingYear}\n          onPressYear={onPressYear}\n          startYear={startYear ?? 1800}\n          endYear={endYear ?? 2200}\n        />\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: { flex: 1 },\n  viewPager: { flex: 1 },\n})\n\nexport default React.memo(Calendar)\n"]},"metadata":{},"sourceType":"module"}