{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"onChange\", \"bgColor\", \"color\", \"borderColor\", \"prestine\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InputContainer from \"./CustomElements/CustomInputContainer\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar DatePicker = function DatePicker(_ref) {\n  var value = _ref.value,\n      _onChange = _ref.onChange,\n      _ref$bgColor = _ref.bgColor,\n      bgColor = _ref$bgColor === void 0 ? \"rgba(236,236,236, 0.9)\" : _ref$bgColor,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"grey\" : _ref$color,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? \"rgba(230,230,230, 1)\" : _ref$borderColor,\n      _ref$prestine = _ref.prestine,\n      prestine = _ref$prestine === void 0 ? true : _ref$prestine,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(new Date(1598051730000)),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState('date'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      show = _useState6[0],\n      setShow = _useState6[1];\n\n  var onChange1 = function onChange1(event, selectedDate) {\n    var currentDate = selectedDate;\n    setShow(false);\n    setDate(currentDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    if (Platform.OS === 'android') {\n      setShow(false);\n    }\n\n    setMode(currentMode);\n  };\n\n  var showDatepicker = function showDatepicker() {\n    showMode('date');\n  };\n\n  return _jsx(InputContainer, _objectSpread(_objectSpread({\n    color: color\n  }, rest), {}, {\n    child: _jsxs(_Fragment, {\n      children: [_jsx(Button, {\n        onPress: showDatepicker,\n        title: \"Show date picker!\"\n      }), show && _jsx(DateTimePicker, {\n        testID: \"dateTimePicker\",\n        value: date,\n        mode: mode,\n        is24Hour: true,\n        onChange: function onChange() {\n          return _onChange;\n        }\n      })]\n    }),\n    prestine: prestine,\n    value: \"\"\n  }));\n};\n\nexport default DatePicker;","map":{"version":3,"names":["React","useState","InputContainer","DateTimePicker","DatePicker","value","onChange","bgColor","color","borderColor","prestine","rest","Date","date","setDate","mode","setMode","show","setShow","onChange1","event","selectedDate","currentDate","showMode","currentMode","Platform","OS","showDatepicker"],"sources":["/Users/mihail.tsankov/Desktop/bootcamp/git/react-native-typescript/react-native/Gallery/Components/.newFolder/CustomComponents/CustomDatePicker.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Platform, TextInput } from \"react-native\";\nimport { Colorable, InputField, onChangeInterface, Resizeable} from \"./shared/shared-interfaces\";\nimport InputContainer, { inputStyle } from \"./CustomElements/CustomInputContainer\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\n\n\ninterface DatePickerProps extends Colorable, Resizeable, InputField, onChangeInterface {\n   \n}\n\nconst DatePicker = ({ value, onChange, bgColor = \"rgba(236,236,236, 0.9)\", color =\"grey\", borderColor = \"rgba(230,230,230, 1)\", \n                 prestine = true, ...rest}: DatePickerProps) => {\n    \n                    const [date, setDate] = useState(new Date(1598051730000));\n  const [mode, setMode] = useState('date');\n  const [show, setShow] = useState(false);\n\n  const onChange1 = (event, selectedDate) => {\n    const currentDate = selectedDate;\n    setShow(false);\n    setDate(currentDate);\n  };\n\n  const showMode = (currentMode) => {\n    if (Platform.OS === 'android') {\n      setShow(false);\n      // for iOS, add a button that closes the picker\n    }\n    setMode(currentMode);\n  };\n\n  const showDatepicker = () => {\n    showMode('date');\n  };\n\n                    \n    return (\n        \n        <InputContainer color={color} {...rest}\n\n            child={\n                <>\n                <Button onPress={showDatepicker} title=\"Show date picker!\" />\n                {show && (\n                    <DateTimePicker\n                    testID=\"dateTimePicker\"\n                    value={date}\n                    mode={mode}\n                    is24Hour={true}\n                    onChange={() => onChange}\n                    />\n                )}\n                </>\n                    }\n            prestine={prestine} value={\"\"} />\n    );\n}\n\nexport default DatePicker;"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,OAAOC,cAAP;AACA,OAAOC,cAAP,MAA2B,wCAA3B;;;;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAC6C;EAAA,IAD1CC,KAC0C,QAD1CA,KAC0C;EAAA,IADnCC,SACmC,QADnCA,QACmC;EAAA,wBADzBC,OACyB;EAAA,IADzBA,OACyB,6BADf,wBACe;EAAA,sBADWC,KACX;EAAA,IADWA,KACX,2BADkB,MAClB;EAAA,4BAD0BC,WAC1B;EAAA,IAD0BA,WAC1B,iCADwC,sBACxC;EAAA,yBAA/CC,QAA+C;EAAA,IAA/CA,QAA+C,8BAApC,IAAoC;EAAA,IAA3BC,IAA2B;;EAE5C,gBAAwBV,QAAQ,CAAC,IAAIW,IAAJ,CAAS,aAAT,CAAD,CAAhC;EAAA;EAAA,IAAOC,IAAP;EAAA,IAAaC,OAAb;;EAClB,iBAAwBb,QAAQ,CAAC,MAAD,CAAhC;EAAA;EAAA,IAAOc,IAAP;EAAA,IAAaC,OAAb;;EACA,iBAAwBf,QAAQ,CAAC,KAAD,CAAhC;EAAA;EAAA,IAAOgB,IAAP;EAAA,IAAaC,OAAb;;EAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,YAAR,EAAyB;IACzC,IAAMC,WAAW,GAAGD,YAApB;IACAH,OAAO,CAAC,KAAD,CAAP;IACAJ,OAAO,CAACQ,WAAD,CAAP;EACD,CAJD;;EAMA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,WAAD,EAAiB;IAChC,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;MAC7BR,OAAO,CAAC,KAAD,CAAP;IAED;;IACDF,OAAO,CAACQ,WAAD,CAAP;EACD,CAND;;EAQA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;IAC3BJ,QAAQ,CAAC,MAAD,CAAR;EACD,CAFD;;EAKE,OAEI,KAAC,cAAD;IAAgB,KAAK,EAAEf;EAAvB,GAAkCG,IAAlC;IAEI,KAAK,EACD;MAAA,WACA,KAAC,MAAD;QAAQ,OAAO,EAAEgB,cAAjB;QAAiC,KAAK,EAAC;MAAvC,EADA,EAECV,IAAI,IACD,KAAC,cAAD;QACA,MAAM,EAAC,gBADP;QAEA,KAAK,EAAEJ,IAFP;QAGA,IAAI,EAAEE,IAHN;QAIA,QAAQ,EAAE,IAJV;QAKA,QAAQ,EAAE;UAAA,OAAMT,SAAN;QAAA;MALV,EAHJ;IAAA,EAHR;IAgBI,QAAQ,EAAEI,QAhBd;IAgBwB,KAAK,EAAE;EAhB/B,GAFJ;AAoBH,CA9CD;;AAgDA,eAAeN,UAAf"},"metadata":{},"sourceType":"module"}