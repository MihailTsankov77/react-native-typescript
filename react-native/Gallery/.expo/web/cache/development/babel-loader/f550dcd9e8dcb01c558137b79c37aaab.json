{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"clockType\", \"pressed\", \"onPress\", \"onChanged\", \"inputType\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme, TouchableRipple } from 'react-native-paper';\nimport Color from 'color';\nimport { inputTypes, useInputColors } from \"./timeUtils\";\n\nfunction TimeInput(_ref, ref) {\n  var value = _ref.value,\n      clockType = _ref.clockType,\n      pressed = _ref.pressed,\n      _onPress = _ref.onPress,\n      onChanged = _ref.onChanged,\n      inputType = _ref.inputType,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(\"\" + value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      controlledValue = _React$useState2[0],\n      setControlledValue = _React$useState2[1];\n\n  var onInnerChange = function onInnerChange(text) {\n    setControlledValue(text);\n\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text));\n    }\n  };\n\n  React.useEffect(function () {\n    setControlledValue(\"\" + value);\n  }, [value]);\n  var theme = useTheme();\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      inputFocused = _React$useState4[0],\n      setInputFocused = _React$useState4[1];\n\n  var highlighted = inputType === inputTypes.picker ? pressed : inputFocused;\n\n  var _useInputColors = useInputColors(highlighted),\n      color = _useInputColors.color,\n      backgroundColor = _useInputColors.backgroundColor;\n\n  var formattedValue = controlledValue;\n\n  if (!inputFocused) {\n    formattedValue = controlledValue.length === 1 ? \"0\" + controlledValue : \"\" + controlledValue;\n  }\n\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(TextInput, _extends({\n    ref: ref,\n    style: [styles.input, {\n      color: color,\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness\n    }],\n    value: formattedValue,\n    maxLength: 2,\n    onFocus: function onFocus() {\n      return setInputFocused(true);\n    },\n    onBlur: function onBlur() {\n      return setInputFocused(false);\n    },\n    keyboardAppearance: theme.dark ? 'dark' : 'default',\n    keyboardType: \"number-pad\",\n    onChangeText: onInnerChange\n  }, rest)), _onPress && inputType === inputTypes.picker ? React.createElement(TouchableRipple, {\n    style: [StyleSheet.absoluteFill, styles.buttonOverlay, {\n      borderRadius: theme.roundness\n    }],\n    rippleColor: Color(theme.colors.primary).fade(0.7).hex(),\n    onPress: function onPress() {\n      return _onPress(clockType);\n    },\n    borderless: true\n  }, React.createElement(View, null)) : null);\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    position: 'relative',\n    height: 80,\n    width: 96\n  },\n  input: {\n    fontSize: 50,\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96,\n    height: 80\n  },\n  buttonOverlay: {\n    overflow: 'hidden'\n  }\n});\nexport default React.forwardRef(TimeInput);","map":{"version":3,"mappings":"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","names":["React","useTheme","TouchableRipple","Color","inputTypes","useInputColors","TimeInput","ref","value","clockType","pressed","onPress","onChanged","inputType","rest","useState","controlledValue","setControlledValue","onInnerChange","text","Number","useEffect","theme","inputFocused","setInputFocused","highlighted","picker","color","backgroundColor","formattedValue","length","View","style","styles","root","TextInput","input","borderRadius","roundness","maxLength","onFocus","onBlur","keyboardAppearance","dark","keyboardType","onChangeText","StyleSheet","absoluteFill","buttonOverlay","rippleColor","colors","primary","fade","hex","borderless","create","position","height","width","fontSize","textAlign","textAlignVertical","overflow","forwardRef"],"sources":["TimeInput.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, TextInput, TextInputProps, StyleSheet } from 'react-native'\nimport { useTheme, TouchableRipple } from 'react-native-paper'\n\nimport Color from 'color'\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  useInputColors,\n} from './timeUtils'\n\ninterface TimeInputProps\n  extends Omit<Omit<TextInputProps, 'value'>, 'onFocus'> {\n  value: number\n  clockType: PossibleClockTypes\n  onPress?: (type: PossibleClockTypes) => any\n  pressed: boolean\n  onChanged: (n: number) => any\n  inputType: PossibleInputTypes\n}\n\nfunction TimeInput(\n  {\n    value,\n    clockType,\n    pressed,\n    onPress,\n    onChanged,\n    inputType,\n    ...rest\n  }: TimeInputProps,\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    `${value}`\n  )\n\n  const onInnerChange = (text: string) => {\n    setControlledValue(text)\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text))\n    }\n  }\n\n  React.useEffect(() => {\n    setControlledValue(`${value}`)\n  }, [value])\n\n  const theme = useTheme()\n  const [inputFocused, setInputFocused] = React.useState<boolean>(false)\n\n  const highlighted = inputType === inputTypes.picker ? pressed : inputFocused\n\n  const { color, backgroundColor } = useInputColors(highlighted)\n\n  let formattedValue = controlledValue\n  if (!inputFocused) {\n    formattedValue =\n      controlledValue.length === 1\n        ? `0${controlledValue}`\n        : `${controlledValue}`\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        ref={ref}\n        style={[\n          styles.input,\n          {\n            color,\n            backgroundColor,\n            borderRadius: theme.roundness,\n          },\n        ]}\n        value={formattedValue}\n        maxLength={2}\n        onFocus={() => setInputFocused(true)}\n        onBlur={() => setInputFocused(false)}\n        keyboardAppearance={theme.dark ? 'dark' : 'default'}\n        keyboardType=\"number-pad\"\n        onChangeText={onInnerChange}\n        {...rest}\n      />\n      {onPress && inputType === inputTypes.picker ? (\n        <TouchableRipple\n          style={[\n            StyleSheet.absoluteFill,\n            styles.buttonOverlay,\n            {\n              // backgroundColor: 'blue',\n              borderRadius: theme.roundness,\n            },\n          ]}\n          rippleColor={Color(theme.colors.primary).fade(0.7).hex()}\n          onPress={() => onPress(clockType)}\n          borderless={true}\n        >\n          <View />\n        </TouchableRipple>\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: { position: 'relative', height: 80, width: 96 },\n  input: {\n    fontSize: 50,\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96,\n    height: 80,\n  },\n  buttonOverlay: { overflow: 'hidden' },\n})\n\nexport default React.forwardRef(TimeInput)\n"]},"metadata":{},"sourceType":"module"}