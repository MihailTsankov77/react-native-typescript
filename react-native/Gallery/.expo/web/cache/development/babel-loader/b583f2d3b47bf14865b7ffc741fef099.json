{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"value\", \"onChange\", \"style\", \"locale\", \"validRange\", \"inputMode\", \"withDateFormatInLabel\", \"modal\", \"inputButtons\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport TextInputWithMask from \"../TextInputMask\";\nimport { HelperText, useTheme } from 'react-native-paper';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useDateInput from \"./inputUtils\";\n\nfunction DatePickerInputWithoutModal(_ref, ref) {\n  var label = _ref.label,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      style = _ref.style,\n      locale = _ref.locale,\n      validRange = _ref.validRange,\n      inputMode = _ref.inputMode,\n      _ref$withDateFormatIn = _ref.withDateFormatInLabel,\n      withDateFormatInLabel = _ref$withDateFormatIn === void 0 ? true : _ref$withDateFormatIn,\n      modal = _ref.modal,\n      inputButtons = _ref.inputButtons,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useTheme();\n\n  var _useDateInput = useDateInput({\n    locale: locale,\n    value: value,\n    validRange: validRange,\n    inputMode: inputMode,\n    onChange: onChange\n  }),\n      formattedValue = _useDateInput.formattedValue,\n      inputFormat = _useDateInput.inputFormat,\n      onChangeText = _useDateInput.onChangeText,\n      error = _useDateInput.error;\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.root\n  }, React.createElement(TextInputWithMask, _extends({}, rest, {\n    ref: ref,\n    label: getLabel({\n      label: label,\n      inputFormat: inputFormat,\n      withDateFormatInLabel: withDateFormatInLabel\n    }),\n    value: formattedValue,\n    keyboardType: 'number-pad',\n    placeholder: inputFormat,\n    mask: inputFormat,\n    onChangeText: onChangeText,\n    keyboardAppearance: theme.dark ? 'dark' : 'default',\n    error: !!error,\n    style: [styles.input, style]\n  })), inputButtons, !!error ? React.createElement(View, {\n    style: styles.helperText\n  }, React.createElement(HelperText, {\n    style: styles.helperText,\n    type: \"error\",\n    visible: !!error\n  }, error)) : null), modal === null || modal === void 0 ? void 0 : modal({\n    value: value,\n    locale: locale,\n    inputMode: inputMode,\n    validRange: validRange\n  }));\n}\n\nfunction getLabel(_ref2) {\n  var withDateFormatInLabel = _ref2.withDateFormatInLabel,\n      inputFormat = _ref2.inputFormat,\n      label = _ref2.label;\n\n  if (withDateFormatInLabel) {\n    return label ? label + \" (\" + inputFormat + \")\" : inputFormat;\n  }\n\n  return label || '';\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    minWidth: 150,\n    flexGrow: 1,\n    justifyContent: 'center'\n  },\n  helperTextContainer: {\n    flexDirection: 'row'\n  },\n  helperText: {\n    flex: 1\n  },\n  input: {}\n});\nexport default React.forwardRef(DatePickerInputWithoutModal);","map":{"version":3,"mappings":"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","names":["React","TextInputWithMask","HelperText","useTheme","useDateInput","DatePickerInputWithoutModal","ref","label","value","onChange","style","locale","validRange","inputMode","withDateFormatInLabel","modal","inputButtons","rest","theme","formattedValue","inputFormat","onChangeText","error","View","styles","root","getLabel","keyboardType","placeholder","mask","keyboardAppearance","dark","input","helperText","type","visible","StyleSheet","create","minWidth","flexGrow","justifyContent","helperTextContainer","flexDirection","flex","forwardRef"],"sources":["DatePickerInputWithoutModal.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport TextInputWithMask from '../TextInputMask'\nimport { HelperText, useTheme } from 'react-native-paper'\nimport { View, StyleSheet } from 'react-native'\nimport useDateInput from './inputUtils'\nimport type { DatePickerInputProps } from './DatePickerInput.shared'\n\nfunction DatePickerInputWithoutModal(\n  {\n    label,\n    value,\n    onChange,\n    style,\n    locale,\n    validRange,\n    inputMode,\n    withDateFormatInLabel = true,\n    modal,\n    inputButtons,\n    ...rest\n  }: DatePickerInputProps & {\n    modal?: (params: {\n      value: DatePickerInputProps['value']\n      locale: DatePickerInputProps['locale']\n      inputMode: DatePickerInputProps['inputMode']\n      validRange: DatePickerInputProps['validRange']\n    }) => any\n    inputButtons?: any\n  },\n  ref: any\n) {\n  const theme = useTheme()\n  const { formattedValue, inputFormat, onChangeText, error } = useDateInput({\n    locale,\n    value,\n    validRange,\n    inputMode,\n    onChange,\n  })\n\n  return (\n    <>\n      <View style={styles.root}>\n        <TextInputWithMask\n          {...rest}\n          ref={ref}\n          label={getLabel({\n            // TODO: support label components?\n            label: label as any,\n            inputFormat,\n            withDateFormatInLabel,\n          })}\n          value={formattedValue}\n          keyboardType={'number-pad'}\n          placeholder={inputFormat}\n          mask={inputFormat}\n          onChangeText={onChangeText}\n          keyboardAppearance={theme.dark ? 'dark' : 'default'}\n          error={!!error}\n          style={[styles.input, style]}\n        />\n        {inputButtons}\n        {!!error ? (\n          <View style={styles.helperText}>\n            <HelperText\n              style={styles.helperText}\n              type=\"error\"\n              visible={!!error}\n            >\n              {error}\n            </HelperText>\n          </View>\n        ) : null}\n      </View>\n      {modal?.({ value, locale, inputMode, validRange })}\n    </>\n  )\n}\n\nfunction getLabel({\n  withDateFormatInLabel,\n  inputFormat,\n  label,\n}: {\n  withDateFormatInLabel: boolean\n  inputFormat: string\n  label: string | undefined\n}) {\n  if (withDateFormatInLabel) {\n    return label ? `${label} (${inputFormat})` : inputFormat\n  }\n  return label || ''\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    minWidth: 150,\n    flexGrow: 1,\n    justifyContent: 'center',\n  },\n  helperTextContainer: {\n    flexDirection: 'row',\n  },\n  helperText: {\n    flex: 1,\n  },\n  input: {},\n})\nexport default React.forwardRef(DatePickerInputWithoutModal)\n"]},"metadata":{},"sourceType":"module"}