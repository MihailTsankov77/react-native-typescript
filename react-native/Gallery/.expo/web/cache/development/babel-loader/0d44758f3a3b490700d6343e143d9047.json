{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { inputTypes, toHourInputFormat, toHourOutputFormat } from \"./timeUtils\";\nimport AnalogClock from \"./AnalogClock\";\nimport { circleSize } from \"./timeUtils\";\nimport TimeInputs from \"./TimeInputs\";\nexport var DisplayModeContext = React.createContext({\n  mode: 'AM',\n  setMode: function setMode() {}\n});\n\nfunction TimePicker(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      onFocusInput = _ref.onFocusInput,\n      focused = _ref.focused,\n      inputType = _ref.inputType,\n      onChange = _ref.onChange,\n      locale = _ref.locale;\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      displayMode = _React$useState2[0],\n      setDisplayMode = _React$useState2[1];\n\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var is24Hour = React.useMemo(function () {\n    var formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC'\n    });\n    var formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)));\n    return formatted.includes('23');\n  }, [locale]);\n  React.useEffect(function () {\n    if (hours >= 12) {\n      setDisplayMode('PM');\n    } else {\n      setDisplayMode('AM');\n    }\n  }, []);\n  var onInnerChange = React.useCallback(function (params) {\n    params.hours = toHourOutputFormat(params.hours, hours, is24Hour);\n    onChange(params);\n  }, [onChange, hours, is24Hour]);\n  return React.createElement(DisplayModeContext.Provider, {\n    value: {\n      mode: displayMode,\n      setMode: setDisplayMode\n    }\n  }, React.createElement(View, {\n    style: isLandscape ? styles.rootLandscape : styles.rootPortrait\n  }, React.createElement(TimeInputs, {\n    inputType: inputType,\n    hours: hours,\n    minutes: minutes,\n    is24Hour: is24Hour,\n    onChange: onChange,\n    onFocusInput: onFocusInput,\n    focused: focused\n  }), inputType === inputTypes.picker ? React.createElement(View, {\n    style: styles.clockContainer\n  }, React.createElement(AnalogClock, {\n    hours: toHourInputFormat(hours, is24Hour),\n    minutes: minutes,\n    focused: focused,\n    is24Hour: is24Hour,\n    onChange: onInnerChange\n  })) : null));\n}\n\nvar styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 24 * 3 + 96 * 2 + 52 + circleSize\n  },\n  rootPortrait: {},\n  clockContainer: {\n    paddingTop: 36,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\nexport default React.memo(TimePicker);","map":{"version":3,"mappings":"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","names":["React","inputTypes","toHourInputFormat","toHourOutputFormat","AnalogClock","circleSize","TimeInputs","DisplayModeContext","createContext","mode","setMode","TimePicker","hours","minutes","onFocusInput","focused","inputType","onChange","locale","useState","undefined","displayMode","setDisplayMode","dimensions","useWindowDimensions","isLandscape","width","height","is24Hour","useMemo","formatter","Intl","DateTimeFormat","hour","minute","timeZone","formatted","format","Date","UTC","includes","useEffect","onInnerChange","useCallback","params","Provider","value","View","style","styles","rootLandscape","rootPortrait","picker","clockContainer","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingTop","paddingLeft","paddingRight","memo"],"sources":["TimePicker.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet, useWindowDimensions } from 'react-native'\n\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\n\nimport AnalogClock from './AnalogClock'\nimport { circleSize } from './timeUtils'\nimport TimeInputs from './TimeInputs'\n\nexport const DisplayModeContext = React.createContext<{\n  mode: 'AM' | 'PM' | undefined\n  setMode: React.Dispatch<React.SetStateAction<'AM' | 'PM' | undefined>>\n}>({ mode: 'AM', setMode: () => {} })\n\ntype onChangeFunc = ({\n  hours,\n  minutes,\n  focused,\n}: {\n  hours: number\n  minutes: number\n  focused?: undefined | PossibleClockTypes\n}) => any\n\nfunction TimePicker({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  locale,\n}: {\n  locale?: undefined | string\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: onChangeFunc\n}) {\n  const [displayMode, setDisplayMode] = React.useState<'AM' | 'PM' | undefined>(\n    undefined\n  )\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n\n  // method to check whether we have 24 hours in clock or 12\n  const is24Hour = React.useMemo(() => {\n    const formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC',\n    })\n    const formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)))\n    return formatted.includes('23')\n  }, [locale])\n\n  // Initialize display Mode according the hours value\n  React.useEffect(() => {\n    if (hours >= 12) {\n      setDisplayMode('PM')\n    } else {\n      setDisplayMode('AM')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const onInnerChange = React.useCallback<onChangeFunc>(\n    (params) => {\n      params.hours = toHourOutputFormat(params.hours, hours, is24Hour)\n      onChange(params)\n    },\n    [onChange, hours, is24Hour]\n  )\n\n  return (\n    <DisplayModeContext.Provider\n      value={{ mode: displayMode, setMode: setDisplayMode }}\n    >\n      <View style={isLandscape ? styles.rootLandscape : styles.rootPortrait}>\n        <TimeInputs\n          inputType={inputType}\n          hours={hours}\n          minutes={minutes}\n          is24Hour={is24Hour}\n          onChange={onChange}\n          onFocusInput={onFocusInput}\n          focused={focused}\n        />\n        {inputType === inputTypes.picker ? (\n          <View style={styles.clockContainer}>\n            <AnalogClock\n              hours={toHourInputFormat(hours, is24Hour)}\n              minutes={minutes}\n              focused={focused}\n              is24Hour={is24Hour}\n              onChange={onInnerChange}\n            />\n          </View>\n        ) : null}\n      </View>\n    </DisplayModeContext.Provider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 24 * 3 + 96 * 2 + 52 + circleSize,\n  },\n  rootPortrait: {},\n  clockContainer: { paddingTop: 36, paddingLeft: 12, paddingRight: 12 },\n})\n\nexport default React.memo(TimePicker)\n"]},"metadata":{},"sourceType":"module"}