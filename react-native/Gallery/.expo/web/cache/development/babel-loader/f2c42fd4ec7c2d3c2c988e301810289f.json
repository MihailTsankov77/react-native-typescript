{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport { useMemo } from 'react';\nimport Color from 'color';\nimport { useSwitchColors } from \"./timeUtils\";\nimport { DisplayModeContext } from \"./TimePicker\";\nexport default function AmPmSwitcher(_ref) {\n  var onChange = _ref.onChange,\n      hours = _ref.hours;\n\n  var _React$useContext = React.useContext(DisplayModeContext),\n      setMode = _React$useContext.setMode,\n      mode = _React$useContext.mode;\n\n  var theme = useTheme();\n  var backgroundColor = useMemo(function () {\n    if (theme.dark) {\n      return Color(theme.colors.surface).lighten(1.2).hex();\n    }\n\n    return Color(theme.colors.surface).darken(0.1).hex();\n  }, [theme]);\n  var isAM = mode === 'AM';\n  return React.createElement(View, {\n    style: [styles.root, {\n      borderColor: backgroundColor,\n      borderRadius: theme.roundness\n    }]\n  }, React.createElement(SwitchButton, {\n    label: \"AM\",\n    onPress: function onPress() {\n      setMode('AM');\n\n      if (hours - 12 >= 0) {\n        onChange(hours - 12);\n      }\n    },\n    selected: isAM,\n    disabled: isAM\n  }), React.createElement(View, {\n    style: [styles.switchSeparator, {\n      backgroundColor: backgroundColor\n    }]\n  }), React.createElement(SwitchButton, {\n    label: \"PM\",\n    onPress: function onPress() {\n      setMode('PM');\n\n      if (hours + 12 <= 24) {\n        onChange(hours + 12);\n      }\n    },\n    selected: !isAM,\n    disabled: !isAM\n  }));\n}\n\nfunction SwitchButton(_ref2) {\n  var label = _ref2.label,\n      onPress = _ref2.onPress,\n      selected = _ref2.selected,\n      disabled = _ref2.disabled;\n  var theme = useTheme();\n\n  var _useSwitchColors = useSwitchColors(selected),\n      backgroundColor = _useSwitchColors.backgroundColor,\n      color = _useSwitchColors.color;\n\n  return React.createElement(TouchableRipple, {\n    onPress: onPress,\n    style: styles.switchButton,\n    accessibilityLabel: label,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.switchButtonInner, {\n      backgroundColor: backgroundColor\n    }]\n  }, React.createElement(Text, {\n    selectable: false,\n    style: [_objectSpread(_objectSpread({}, theme.fonts.medium), {}, {\n      color: color\n    })]\n  }, label)));\n}\n\nvar styles = StyleSheet.create({\n  root: {\n    width: 50,\n    height: 80,\n    borderWidth: 1,\n    overflow: 'hidden'\n  },\n  switchSeparator: {\n    height: 1,\n    width: 48\n  },\n  switchButton: {\n    flex: 1\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Text","TouchableRipple","useTheme","useMemo","Color","useSwitchColors","DisplayModeContext","AmPmSwitcher","onChange","hours","useContext","setMode","mode","theme","backgroundColor","dark","colors","surface","lighten","hex","darken","isAM","View","style","styles","root","borderColor","borderRadius","roundness","SwitchButton","label","onPress","selected","disabled","switchSeparator","color","switchButton","accessibilityLabel","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","switchButtonInner","selectable","fonts","medium","StyleSheet","create","width","height","borderWidth","overflow","flex","alignItems","justifyContent"],"sources":["AmPmSwitcher.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper'\nimport { useMemo } from 'react'\nimport Color from 'color'\nimport { useSwitchColors } from './timeUtils'\nimport { DisplayModeContext } from './TimePicker'\n\nexport default function AmPmSwitcher({\n  onChange,\n  hours,\n}: {\n  hours: number\n  onChange: (newHours: number) => any\n}) {\n  const { setMode, mode } = React.useContext(DisplayModeContext)\n  const theme = useTheme()\n  const backgroundColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return Color(theme.colors.surface).lighten(1.2).hex()\n    }\n    return Color(theme.colors.surface).darken(0.1).hex()\n  }, [theme])\n\n  const isAM = mode === 'AM'\n  return (\n    <View\n      style={[\n        styles.root,\n        {\n          borderColor: backgroundColor,\n          borderRadius: theme.roundness,\n        },\n      ]}\n    >\n      <SwitchButton\n        label=\"AM\"\n        onPress={() => {\n          setMode('AM')\n          if (hours - 12 >= 0) {\n            onChange(hours - 12)\n          }\n        }}\n        selected={isAM}\n        disabled={isAM}\n      />\n      <View style={[styles.switchSeparator, { backgroundColor }]} />\n      <SwitchButton\n        label=\"PM\"\n        onPress={() => {\n          setMode('PM')\n          if (hours + 12 <= 24) {\n            onChange(hours + 12)\n          }\n        }}\n        selected={!isAM}\n        disabled={!isAM}\n      />\n    </View>\n  )\n}\n\nfunction SwitchButton({\n  label,\n  onPress,\n  selected,\n  disabled,\n}: {\n  label: string\n  onPress: (() => any) | undefined\n  selected: boolean\n  disabled: boolean\n}) {\n  const theme = useTheme()\n  const { backgroundColor, color } = useSwitchColors(selected)\n\n  return (\n    <TouchableRipple\n      onPress={onPress}\n      style={styles.switchButton}\n      accessibilityLabel={label}\n      // @ts-ignore old React Native versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      // @ts-ignore old React Native versions\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n    >\n      <View style={[styles.switchButtonInner, { backgroundColor }]}>\n        <Text\n          selectable={false}\n          style={[\n            {\n              ...theme.fonts.medium,\n              color: color,\n            },\n          ]}\n        >\n          {label}\n        </Text>\n      </View>\n    </TouchableRipple>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: 50,\n    height: 80,\n    borderWidth: 1,\n    overflow: 'hidden',\n  },\n  switchSeparator: {\n    height: 1,\n    width: 48,\n  },\n  switchButton: {\n    flex: 1,\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}