{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { IconButton, Text, useTheme, TouchableRipple } from 'react-native-paper';\nimport Day, { EmptyDay } from \"./Day\";\nimport { addMonths, areDatesOnSameDay, daySize, getDaysInMonth, getFirstDayOfMonth, getRealIndex, getGridCount, isDateBetween, gridCounts, showWeekDay, startAtIndex, beginOffset, estimatedMonthHeight, useRangeChecker } from \"./dateUtils\";\nimport { getCalendarHeaderHeight } from \"./CalendarHeader\";\nimport { dayNamesHeight } from \"./DayNames\";\nimport { useTextColorOnPrimary } from \"../utils\";\n\nfunction Month(props) {\n  var index = props.index,\n      mode = props.mode,\n      date = props.date,\n      dates = props.dates,\n      startDate = props.startDate,\n      endDate = props.endDate,\n      onPressYear = props.onPressYear,\n      selectingYear = props.selectingYear,\n      onPressDate = props.onPressDate,\n      scrollMode = props.scrollMode,\n      primaryColor = props.primaryColor,\n      selectColor = props.selectColor,\n      roundness = props.roundness,\n      disableWeekDays = props.disableWeekDays,\n      locale = props.locale,\n      validRange = props.validRange;\n  var theme = useTheme();\n  var textColorOnPrimary = useTextColorOnPrimary();\n  var realIndex = getRealIndex(index);\n  var isHorizontal = scrollMode === 'horizontal';\n\n  var _useRangeChecker = useRangeChecker(validRange),\n      isDisabled = _useRangeChecker.isDisabled,\n      isWithinValidRange = _useRangeChecker.isWithinValidRange;\n\n  var _React$useMemo = React.useMemo(function () {\n    var md = addMonths(new Date(), realIndex);\n    var y = md.getFullYear();\n    var m = md.getMonth();\n    var formatter = new Intl.DateTimeFormat(locale, {\n      month: 'long'\n    });\n    return {\n      monthName: formatter.format(md),\n      month: m,\n      year: y\n    };\n  }, [realIndex, locale]),\n      monthName = _React$useMemo.monthName,\n      month = _React$useMemo.month,\n      year = _React$useMemo.year;\n\n  var grid = React.useMemo(function () {\n    var today = new Date();\n    var daysInMonth = getDaysInMonth({\n      year: year,\n      month: month\n    });\n    var dayOfWeek = getFirstDayOfMonth({\n      year: year,\n      month: month\n    });\n    var emptyDays = dayOfWeek;\n    return monthGrid(index).map(function (_ref) {\n      var days = _ref.days,\n          weekGrid = _ref.weekGrid;\n      return {\n        weekIndex: weekGrid,\n        generatedDays: days.map(function (_, dayIndex) {\n          var isFirstWeek = weekGrid === 0;\n          var realDayIndex = emptyDays - dayIndex;\n          var beforeWeekDay = isFirstWeek && realDayIndex > 0;\n          var dayOfMonth = weekGrid * 7 + dayIndex - emptyDays + 1;\n          var afterWeekDay = dayOfMonth > daysInMonth;\n          var day = new Date(year, month, dayOfMonth);\n          var isToday = areDatesOnSameDay(day, today);\n          var inRange = false;\n          var disabled = isDisabled(day);\n          var selected = false;\n          var leftCrop = dayOfMonth === 1;\n          var rightCrop = dayOfMonth === daysInMonth;\n          var isFirstDayOfMonth = dayOfMonth === 1;\n          var isLastDayOfMonth = dayOfMonth === daysInMonth;\n\n          if (mode === 'range') {\n            var selectedStartDay = areDatesOnSameDay(day, startDate);\n            var selectedEndDay = areDatesOnSameDay(day, endDate);\n            selected = selectedStartDay || selectedEndDay;\n            inRange = isDateBetween(day, {\n              startDate: startDate,\n              endDate: endDate\n            });\n\n            if (selectedStartDay) {\n              leftCrop = true;\n            }\n\n            if (selectedEndDay) {\n              rightCrop = true;\n            }\n\n            if (dayIndex === 0 && !selectedStartDay) {\n              leftCrop = false;\n            }\n\n            if (dayIndex === 6 && !selectedEndDay) {\n              rightCrop = false;\n            }\n\n            if (isFirstDayOfMonth && selectedEndDay || isLastDayOfMonth && selectedStartDay) {\n              inRange = false;\n            }\n          } else if (mode === 'multiple') {\n            var safeDates = dates || [];\n            selected = safeDates.some(function (d) {\n              return areDatesOnSameDay(day, d);\n            });\n            var yesterday = new Date(year, month, dayOfMonth - 1);\n            var tomorrow = new Date(year, month, dayOfMonth + 1);\n            var yesterdaySelected = safeDates.some(function (d) {\n              return areDatesOnSameDay(d, yesterday);\n            });\n            var tomorrowSelected = safeDates.some(function (d) {\n              return areDatesOnSameDay(d, tomorrow);\n            });\n\n            if (selected) {\n              if (tomorrowSelected && yesterdaySelected) {\n                inRange = true;\n              }\n\n              if (tomorrowSelected && !yesterdaySelected) {\n                inRange = true;\n                leftCrop = true;\n              }\n\n              if (yesterdaySelected && !tomorrowSelected) {\n                inRange = true;\n                rightCrop = true;\n              }\n\n              if (isFirstDayOfMonth && !tomorrowSelected) {\n                inRange = false;\n              }\n\n              if (isLastDayOfMonth && !yesterdaySelected) {\n                inRange = false;\n              }\n\n              if (inRange && !leftCrop && !rightCrop) {\n                selected = false;\n              }\n            }\n          } else if (mode === 'single') {\n            selected = areDatesOnSameDay(day, date);\n          }\n\n          var isWithinOptionalValidRange = isWithinValidRange(day);\n\n          if (inRange && !disabled) {\n            disabled = false;\n          }\n\n          if (!isWithinOptionalValidRange) {\n            disabled = true;\n          }\n\n          return {\n            beforeWeekDay: beforeWeekDay,\n            afterWeekDay: afterWeekDay,\n            year: year,\n            month: month,\n            dayOfMonth: dayOfMonth,\n            dayIndex: dayIndex,\n            mode: mode,\n            selected: selected,\n            inRange: inRange,\n            leftCrop: leftCrop,\n            rightCrop: rightCrop,\n            isToday: isToday,\n            disabled: disabled\n          };\n        })\n      };\n    });\n  }, [year, month, index, isDisabled, mode, isWithinValidRange, startDate, endDate, dates, date]);\n  return React.createElement(View, {\n    style: [styles.month, {\n      height: getMonthHeight(scrollMode, index)\n    }]\n  }, React.createElement(View, {\n    style: [styles.monthHeader, isHorizontal ? {\n      marginTop: monthHeaderSingleMarginTop,\n      marginBottom: monthHeaderSingleMarginBottom\n    } : null]\n  }, React.createElement(TouchableRipple, {\n    disabled: !isHorizontal,\n    onPress: isHorizontal ? function () {\n      return onPressYear(year);\n    } : undefined,\n    accessibilityRole: \"button\",\n    accessibilityLabel: monthName + \" \" + year,\n    style: [styles.yearButton, {\n      borderRadius: roundness\n    }]\n  }, React.createElement(View, {\n    style: [styles.yearButtonInner, {\n      borderRadius: roundness\n    }]\n  }, React.createElement(Text, {\n    style: [styles.monthLabel, theme.fonts.medium],\n    selectable: false\n  }, monthName, \" \", year), React.createElement(View, {\n    style: isHorizontal ? styles.opacity1 : styles.opacity0\n  }, React.createElement(IconButton, {\n    onPress: isHorizontal ? function () {\n      return onPressYear(year);\n    } : undefined,\n    icon: selectingYear ? 'chevron-up' : 'chevron-down'\n  }))))), grid.map(function (_ref2) {\n    var weekIndex = _ref2.weekIndex,\n        generatedDays = _ref2.generatedDays;\n    return React.createElement(View, {\n      style: styles.week,\n      key: weekIndex\n    }, generatedDays.filter(function (gd) {\n      return showWeekDay(gd.dayIndex, disableWeekDays);\n    }).map(function (gd) {\n      return gd.beforeWeekDay || gd.afterWeekDay ? React.createElement(EmptyDay, {\n        key: gd.dayIndex\n      }) : React.createElement(Day, {\n        key: gd.dayIndex,\n        theme: theme,\n        day: gd.dayOfMonth,\n        month: gd.month,\n        year: gd.year,\n        selected: gd.selected,\n        inRange: gd.inRange,\n        leftCrop: gd.leftCrop,\n        rightCrop: gd.rightCrop,\n        onPressDate: onPressDate,\n        isToday: gd.isToday,\n        selectColor: selectColor,\n        primaryColor: primaryColor,\n        disabled: gd.disabled,\n        textColorOnPrimary: textColorOnPrimary\n      });\n    }));\n  }));\n}\n\nexport var weekMargin = 6;\nexport var weekSize = daySize + weekMargin;\nexport var montHeaderHeight = 56;\nexport var monthHeaderSingleMarginTop = 4;\nexport var monthHeaderSingleMarginBottom = 8 + 44 + 12;\nexport var monthHeaderSingleHeight = monthHeaderSingleMarginTop + monthHeaderSingleMarginBottom;\nvar styles = StyleSheet.create({\n  week: {\n    flexDirection: 'row',\n    marginBottom: weekMargin,\n    height: daySize\n  },\n  month: {},\n  monthHeader: {\n    height: montHeaderHeight,\n    justifyContent: 'center',\n    overflow: 'hidden'\n  },\n  monthLabel: {\n    fontSize: 14,\n    opacity: 0.7\n  },\n  yearButton: {\n    alignSelf: 'flex-start',\n    marginLeft: 6\n  },\n  yearButtonInner: {\n    paddingLeft: 16,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  opacity0: {\n    opacity: 0\n  },\n  opacity1: {\n    opacity: 1\n  }\n});\n\nvar monthGrid = function monthGrid(index) {\n  return Array(getGridCount(index)).fill(null).map(function (_, weekGrid) {\n    var days = Array(7).fill(null);\n    return {\n      weekGrid: weekGrid,\n      days: days\n    };\n  });\n};\n\nfunction getIndexCount(index) {\n  if (index > startAtIndex) {\n    return index - startAtIndex;\n  }\n\n  return -(startAtIndex - index);\n}\n\nfunction weeksOffset(index) {\n  if (index === startAtIndex) {\n    return 0;\n  }\n\n  var off = 0;\n\n  if (index > startAtIndex) {\n    for (var i = 0; i < index - startAtIndex; i++) {\n      var cIndex = startAtIndex + i;\n      off += gridCounts[cIndex] || getGridCount(cIndex);\n    }\n  } else {\n    for (var _i = 0; _i < startAtIndex - index; _i++) {\n      var _cIndex = startAtIndex - _i - 1;\n\n      off -= gridCounts[_cIndex] || getGridCount(_cIndex);\n    }\n  }\n\n  return off;\n}\n\nexport function getIndexFromHorizontalOffset(offset, width) {\n  return startAtIndex + Math.floor(offset / width);\n}\nexport function getIndexFromVerticalOffset(offset) {\n  var estimatedIndex = startAtIndex + Math.ceil(offset / estimatedMonthHeight);\n  var realOffset = getVerticalMonthsOffset(estimatedIndex);\n  var difference = (realOffset - beginOffset - offset) / estimatedMonthHeight;\n\n  if (difference >= 1 || difference <= -1) {\n    estimatedIndex -= Math.floor(difference);\n  }\n\n  return estimatedIndex;\n}\nexport function getHorizontalMonthOffset(index, width) {\n  if (index < 0) {\n    return 0;\n  }\n\n  return width * index;\n}\nexport function getVerticalMonthsOffset(index) {\n  var count = getIndexCount(index);\n  var ob = weeksOffset(index);\n  var monthsHeight = weekSize * ob;\n  var c = monthsHeight + count * (dayNamesHeight + montHeaderHeight);\n  return (c || 0) + beginOffset;\n}\nexport function getMonthHeight(scrollMode, index) {\n  var calendarHeight = getCalendarHeaderHeight(scrollMode);\n  var gc = getGridCount(index);\n  var currentMonthHeight = weekSize * gc;\n  var extraHeight = scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight;\n  var c = calendarHeight + currentMonthHeight + extraHeight;\n  return c || 0;\n}\nexport default React.memo(Month);","map":{"version":3,"mappings":"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","names":["React","IconButton","Text","useTheme","TouchableRipple","Day","EmptyDay","addMonths","areDatesOnSameDay","daySize","getDaysInMonth","getFirstDayOfMonth","getRealIndex","getGridCount","isDateBetween","gridCounts","showWeekDay","startAtIndex","beginOffset","estimatedMonthHeight","useRangeChecker","getCalendarHeaderHeight","dayNamesHeight","useTextColorOnPrimary","Month","props","index","mode","date","dates","startDate","endDate","onPressYear","selectingYear","onPressDate","scrollMode","primaryColor","selectColor","roundness","disableWeekDays","locale","validRange","theme","textColorOnPrimary","realIndex","isHorizontal","isDisabled","isWithinValidRange","useMemo","md","Date","y","getFullYear","m","getMonth","formatter","Intl","DateTimeFormat","month","monthName","format","year","grid","today","daysInMonth","dayOfWeek","emptyDays","monthGrid","map","days","weekGrid","weekIndex","generatedDays","_","dayIndex","isFirstWeek","realDayIndex","beforeWeekDay","dayOfMonth","afterWeekDay","day","isToday","inRange","disabled","selected","leftCrop","rightCrop","isFirstDayOfMonth","isLastDayOfMonth","selectedStartDay","selectedEndDay","safeDates","some","d","yesterday","tomorrow","yesterdaySelected","tomorrowSelected","isWithinOptionalValidRange","View","style","styles","height","getMonthHeight","monthHeader","marginTop","monthHeaderSingleMarginTop","marginBottom","monthHeaderSingleMarginBottom","onPress","undefined","accessibilityRole","accessibilityLabel","yearButton","borderRadius","yearButtonInner","monthLabel","fonts","medium","selectable","opacity1","opacity0","icon","week","key","filter","gd","weekMargin","weekSize","montHeaderHeight","monthHeaderSingleHeight","StyleSheet","create","flexDirection","justifyContent","overflow","fontSize","opacity","alignSelf","marginLeft","paddingLeft","alignItems","Array","fill","getIndexCount","weeksOffset","off","i","cIndex","getIndexFromHorizontalOffset","offset","width","Math","floor","getIndexFromVerticalOffset","estimatedIndex","ceil","realOffset","getVerticalMonthsOffset","difference","getHorizontalMonthOffset","count","ob","monthsHeight","c","calendarHeight","gc","currentMonthHeight","extraHeight","memo"],"sources":["Month.tsx"],"sourcesContent":["import * as React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { IconButton, Text, useTheme, TouchableRipple } from 'react-native-paper'\nimport Day, { EmptyDay } from './Day'\n\nimport {\n  addMonths,\n  areDatesOnSameDay,\n  daySize,\n  DisableWeekDaysType,\n  getDaysInMonth,\n  getFirstDayOfMonth,\n  getRealIndex,\n  getGridCount,\n  isDateBetween,\n  gridCounts,\n  showWeekDay,\n  startAtIndex,\n  beginOffset,\n  estimatedMonthHeight,\n  useRangeChecker,\n} from './dateUtils'\nimport { getCalendarHeaderHeight } from './CalendarHeader'\nimport type {\n  CalendarDate,\n  CalendarDates,\n  ModeType,\n  ValidRangeType,\n} from './Calendar'\nimport { dayNamesHeight } from './DayNames'\nimport { useTextColorOnPrimary } from '../utils'\n\ninterface BaseMonthProps {\n  locale: undefined | string\n  scrollMode: 'horizontal' | 'vertical'\n  disableWeekDays?: DisableWeekDaysType\n  mode: ModeType\n  index: number\n  onPressYear: (year: number) => any\n  selectingYear: boolean\n  onPressDate: (date: Date) => any\n  primaryColor: string\n  selectColor: string\n  roundness: number\n  validRange?: ValidRangeType\n\n  // some of these should be required in final implementation\n  startDate?: CalendarDate\n  endDate?: CalendarDate\n  date?: CalendarDate\n  dates?: CalendarDates\n}\n\ninterface MonthRangeProps extends BaseMonthProps {\n  mode: 'range'\n  startDate: CalendarDate\n  endDate: CalendarDate\n}\n\ninterface MonthSingleProps extends BaseMonthProps {\n  mode: 'single'\n  date: CalendarDate\n}\n\ninterface MonthMultiProps extends BaseMonthProps {\n  mode: 'multiple'\n  dates: CalendarDates\n}\n\nfunction Month(props: MonthSingleProps | MonthRangeProps | MonthMultiProps) {\n  const {\n    index,\n    mode,\n    date,\n    dates,\n    startDate,\n    endDate,\n    onPressYear,\n    selectingYear,\n    onPressDate,\n    scrollMode,\n    primaryColor,\n    selectColor,\n    roundness,\n    disableWeekDays,\n    locale,\n    validRange,\n  } = props\n  const theme = useTheme()\n  const textColorOnPrimary = useTextColorOnPrimary()\n  const realIndex = getRealIndex(index)\n  const isHorizontal = scrollMode === 'horizontal'\n  const { isDisabled, isWithinValidRange } = useRangeChecker(validRange)\n  const { monthName, month, year } = React.useMemo(() => {\n    const md = addMonths(new Date(), realIndex)\n    const y = md.getFullYear()\n    const m = md.getMonth()\n    const formatter = new Intl.DateTimeFormat(locale, {\n      month: 'long',\n    })\n    return { monthName: formatter.format(md), month: m, year: y }\n  }, [realIndex, locale])\n\n  const grid = React.useMemo(() => {\n    const today = new Date()\n\n    const daysInMonth = getDaysInMonth({ year, month })\n    const dayOfWeek = getFirstDayOfMonth({ year, month })\n    const emptyDays = dayOfWeek\n\n    return monthGrid(index).map(({ days, weekGrid }) => {\n      return {\n        weekIndex: weekGrid,\n        generatedDays: days.map((_, dayIndex) => {\n          const isFirstWeek = weekGrid === 0\n          const realDayIndex = emptyDays - dayIndex\n          const beforeWeekDay = isFirstWeek && realDayIndex > 0\n          const dayOfMonth = weekGrid * 7 + dayIndex - emptyDays + 1\n          const afterWeekDay = dayOfMonth > daysInMonth\n\n          const day = new Date(year, month, dayOfMonth)\n          const isToday = areDatesOnSameDay(day, today)\n\n          let inRange = false\n          let disabled = isDisabled(day)\n          let selected = false\n\n          let leftCrop = dayOfMonth === 1\n          let rightCrop = dayOfMonth === daysInMonth\n\n          const isFirstDayOfMonth = dayOfMonth === 1\n          const isLastDayOfMonth = dayOfMonth === daysInMonth\n\n          if (mode === 'range') {\n            const selectedStartDay = areDatesOnSameDay(day, startDate)\n            const selectedEndDay = areDatesOnSameDay(day, endDate)\n            selected = selectedStartDay || selectedEndDay\n            inRange = isDateBetween(day, {\n              startDate,\n              endDate,\n            })\n            if (selectedStartDay) {\n              leftCrop = true\n            }\n            if (selectedEndDay) {\n              rightCrop = true\n            }\n            if (dayIndex === 0 && !selectedStartDay) {\n              leftCrop = false\n            }\n\n            if (dayIndex === 6 && !selectedEndDay) {\n              rightCrop = false\n            }\n\n            if (\n              (isFirstDayOfMonth && selectedEndDay) ||\n              (isLastDayOfMonth && selectedStartDay)\n            ) {\n              inRange = false\n            }\n          } else if (mode === 'multiple') {\n            const safeDates = dates || []\n            selected = safeDates.some((d) => areDatesOnSameDay(day, d))\n\n            const yesterday = new Date(year, month, dayOfMonth - 1)\n            const tomorrow = new Date(year, month, dayOfMonth + 1)\n\n            const yesterdaySelected = safeDates.some((d) =>\n              areDatesOnSameDay(d, yesterday)\n            )\n            const tomorrowSelected = safeDates.some((d) =>\n              areDatesOnSameDay(d, tomorrow)\n            )\n\n            if (selected) {\n              if (tomorrowSelected && yesterdaySelected) {\n                inRange = true\n              }\n              if (tomorrowSelected && !yesterdaySelected) {\n                inRange = true\n                leftCrop = true\n              }\n\n              if (yesterdaySelected && !tomorrowSelected) {\n                inRange = true\n                rightCrop = true\n              }\n\n              if (isFirstDayOfMonth && !tomorrowSelected) {\n                inRange = false\n              }\n\n              if (isLastDayOfMonth && !yesterdaySelected) {\n                inRange = false\n              }\n\n              if (inRange && !leftCrop && !rightCrop) {\n                selected = false\n              }\n            }\n          } else if (mode === 'single') {\n            selected = areDatesOnSameDay(day, date)\n          }\n\n          const isWithinOptionalValidRange = isWithinValidRange(day)\n\n          if (inRange && !disabled) {\n            disabled = false\n          }\n\n          if (!isWithinOptionalValidRange) {\n            disabled = true\n          }\n\n          return {\n            beforeWeekDay,\n            afterWeekDay,\n            year,\n            month,\n            dayOfMonth,\n            dayIndex,\n            mode,\n            selected,\n            inRange,\n            leftCrop,\n            rightCrop,\n            isToday,\n            disabled,\n          }\n        }),\n      }\n    })\n  }, [\n    year,\n    month,\n    index,\n    isDisabled,\n    mode,\n    isWithinValidRange,\n    startDate,\n    endDate,\n    dates,\n    date,\n  ])\n\n  return (\n    <View style={[styles.month, { height: getMonthHeight(scrollMode, index) }]}>\n      <View\n        style={[\n          styles.monthHeader,\n          isHorizontal\n            ? {\n                marginTop: monthHeaderSingleMarginTop,\n                marginBottom: monthHeaderSingleMarginBottom,\n              }\n            : null,\n        ]}\n      >\n        <TouchableRipple\n          disabled={!isHorizontal}\n          onPress={isHorizontal ? () => onPressYear(year) : undefined}\n          accessibilityRole=\"button\"\n          accessibilityLabel={`${monthName} ${year}`}\n          style={[\n            styles.yearButton,\n            {\n              borderRadius: roundness,\n            },\n          ]}\n        >\n          <View\n            style={[\n              styles.yearButtonInner,\n              {\n                borderRadius: roundness,\n              },\n            ]}\n          >\n            <Text\n              style={[styles.monthLabel, theme.fonts.medium]}\n              selectable={false}\n            >\n              {monthName} {year}\n            </Text>\n            <View style={isHorizontal ? styles.opacity1 : styles.opacity0}>\n              <IconButton\n                onPress={isHorizontal ? () => onPressYear(year) : undefined}\n                icon={selectingYear ? 'chevron-up' : 'chevron-down'}\n              />\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {grid.map(({ weekIndex, generatedDays }) => (\n        <View style={styles.week} key={weekIndex}>\n          {generatedDays\n            .filter((gd) => showWeekDay(gd.dayIndex, disableWeekDays))\n            .map((gd) =>\n              gd.beforeWeekDay || gd.afterWeekDay ? (\n                <EmptyDay key={gd.dayIndex} />\n              ) : (\n                <Day\n                  key={gd.dayIndex}\n                  theme={theme}\n                  day={gd.dayOfMonth}\n                  month={gd.month}\n                  year={gd.year}\n                  selected={gd.selected}\n                  inRange={gd.inRange}\n                  leftCrop={gd.leftCrop}\n                  rightCrop={gd.rightCrop}\n                  onPressDate={onPressDate}\n                  isToday={gd.isToday}\n                  selectColor={selectColor}\n                  primaryColor={primaryColor}\n                  disabled={gd.disabled}\n                  textColorOnPrimary={textColorOnPrimary}\n                />\n              )\n            )}\n        </View>\n      ))}\n    </View>\n  )\n}\n\nexport const weekMargin = 6\nexport const weekSize = daySize + weekMargin\nexport const montHeaderHeight = 56\nexport const monthHeaderSingleMarginTop = 4\nexport const monthHeaderSingleMarginBottom = 8 + 44 + 12\nexport const monthHeaderSingleHeight =\n  monthHeaderSingleMarginTop + monthHeaderSingleMarginBottom\n\nconst styles = StyleSheet.create({\n  week: {\n    flexDirection: 'row',\n    marginBottom: weekMargin,\n    height: daySize,\n  },\n\n  month: {},\n\n  monthHeader: {\n    height: montHeaderHeight,\n    justifyContent: 'center',\n    overflow: 'hidden',\n  },\n  monthLabel: { fontSize: 14, opacity: 0.7 },\n  yearButton: { alignSelf: 'flex-start', marginLeft: 6 },\n  yearButtonInner: {\n    paddingLeft: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  opacity0: { opacity: 0 },\n  opacity1: { opacity: 1 },\n})\n\nconst monthGrid = (index: number) => {\n  return Array(getGridCount(index))\n    .fill(null)\n    .map((_, weekGrid) => {\n      const days = Array(7).fill(null)\n      return { weekGrid, days }\n    })\n}\n\nfunction getIndexCount(index: number): number {\n  if (index > startAtIndex) {\n    return index - startAtIndex\n  }\n\n  return -(startAtIndex - index)\n}\n\nfunction weeksOffset(index: number): number {\n  if (index === startAtIndex) {\n    return 0\n  }\n  let off = 0\n  if (index > startAtIndex) {\n    for (let i = 0; i < index - startAtIndex; i++) {\n      const cIndex = startAtIndex + i\n      off += gridCounts[cIndex] || getGridCount(cIndex)\n    }\n  } else {\n    for (let i = 0; i < startAtIndex - index; i++) {\n      const cIndex = startAtIndex - i - 1\n      off -= gridCounts[cIndex] || getGridCount(cIndex)\n    }\n  }\n  return off\n}\n\nexport function getIndexFromHorizontalOffset(\n  offset: number,\n  width: number\n): number {\n  return startAtIndex + Math.floor(offset / width)\n}\n\nexport function getIndexFromVerticalOffset(offset: number): number {\n  let estimatedIndex = startAtIndex + Math.ceil(offset / estimatedMonthHeight)\n\n  const realOffset = getVerticalMonthsOffset(estimatedIndex)\n  const difference = (realOffset - beginOffset - offset) / estimatedMonthHeight\n  if (difference >= 1 || difference <= -1) {\n    estimatedIndex -= Math.floor(difference)\n  }\n  return estimatedIndex\n}\n\nexport function getHorizontalMonthOffset(index: number, width: number) {\n  if (index < 0) {\n    return 0\n  }\n  return width * index\n}\n\nexport function getVerticalMonthsOffset(index: number) {\n  const count = getIndexCount(index)\n  const ob = weeksOffset(index)\n  const monthsHeight = weekSize * ob\n  const c = monthsHeight + count * (dayNamesHeight + montHeaderHeight)\n\n  return (c || 0) + beginOffset\n}\n\nexport function getMonthHeight(\n  scrollMode: 'horizontal' | 'vertical',\n  index: number\n): number {\n  const calendarHeight = getCalendarHeaderHeight(scrollMode)\n  const gc = getGridCount(index)\n\n  const currentMonthHeight = weekSize * gc\n  const extraHeight =\n    scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight\n  const c = calendarHeight + currentMonthHeight + extraHeight\n  return c || 0\n}\n\nexport default React.memo(Month)\n"]},"metadata":{},"sourceType":"module"}