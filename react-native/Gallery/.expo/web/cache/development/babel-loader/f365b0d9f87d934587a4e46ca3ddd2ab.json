{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { Button, IconButton, overlay, useTheme } from 'react-native-paper';\nimport TimePicker from \"./TimePicker\";\nimport { clockTypes, getTimeInputTypeIcon, inputTypes, reverseInputTypes } from \"./timeUtils\";\nvar supportedOrientations = ['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'];\nexport function TimePickerModal(_ref) {\n  var visible = _ref.visible,\n      onDismiss = _ref.onDismiss,\n      onConfirm = _ref.onConfirm,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? 'Select time' : _ref$label,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      _ref$cancelLabel = _ref.cancelLabel,\n      cancelLabel = _ref$cancelLabel === void 0 ? 'Cancel' : _ref$cancelLabel,\n      _ref$confirmLabel = _ref.confirmLabel,\n      confirmLabel = _ref$confirmLabel === void 0 ? 'Ok' : _ref$confirmLabel,\n      _ref$animationType = _ref.animationType,\n      animationType = _ref$animationType === void 0 ? 'none' : _ref$animationType,\n      locale = _ref.locale,\n      _ref$keyboardIcon = _ref.keyboardIcon,\n      keyboardIcon = _ref$keyboardIcon === void 0 ? 'keyboard-outline' : _ref$keyboardIcon,\n      _ref$clockIcon = _ref.clockIcon,\n      clockIcon = _ref$clockIcon === void 0 ? 'clock-outline' : _ref$clockIcon;\n  var theme = useTheme();\n\n  var _React$useState = React.useState(inputTypes.picker),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      inputType = _React$useState2[0],\n      setInputType = _React$useState2[1];\n\n  var _React$useState3 = React.useState(clockTypes.hours),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      focused = _React$useState4[0],\n      setFocused = _React$useState4[1];\n\n  var _React$useState5 = React.useState(getHours(hours)),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      localHours = _React$useState6[0],\n      setLocalHours = _React$useState6[1];\n\n  var _React$useState7 = React.useState(getMinutes(minutes)),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      localMinutes = _React$useState8[0],\n      setLocalMinutes = _React$useState8[1];\n\n  React.useEffect(function () {\n    setLocalHours(getHours(hours));\n  }, [setLocalHours, hours]);\n  React.useEffect(function () {\n    setLocalMinutes(getMinutes(minutes));\n  }, [setLocalMinutes, minutes]);\n  var onFocusInput = React.useCallback(function (type) {\n    return setFocused(type);\n  }, []);\n  var onChange = React.useCallback(function (params) {\n    if (params.focused) {\n      setFocused(params.focused);\n    }\n\n    setLocalHours(params.hours);\n    setLocalMinutes(params.minutes);\n  }, [setFocused, setLocalHours, setLocalMinutes]);\n  return React.createElement(Modal, {\n    animationType: animationType,\n    transparent: true,\n    visible: visible,\n    onRequestClose: onDismiss,\n    presentationStyle: \"overFullScreen\",\n    supportedOrientations: supportedOrientations,\n    statusBarTranslucent: true\n  }, React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: onDismiss\n  }, React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.modalBackground, {\n      backgroundColor: theme.colors.backdrop\n    }]\n  })), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.modalRoot],\n    pointerEvents: \"box-none\"\n  }, React.createElement(KeyboardAvoidingView, {\n    style: styles.keyboardView,\n    behavior: 'padding'\n  }, React.createElement(Animated.View, {\n    style: [styles.modalContent, {\n      backgroundColor: theme.dark ? overlay(10, theme.colors.surface) : theme.colors.surface,\n      borderRadius: theme.roundness\n    }]\n  }, React.createElement(View, {\n    style: styles.labelContainer\n  }, React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.text\n    }]\n  }, uppercase ? label.toUpperCase() : label)), React.createElement(View, {\n    style: styles.timePickerContainer\n  }, React.createElement(TimePicker, {\n    locale: locale,\n    inputType: inputType,\n    focused: focused,\n    hours: localHours,\n    minutes: localMinutes,\n    onChange: onChange,\n    onFocusInput: onFocusInput\n  })), React.createElement(View, {\n    style: styles.bottom\n  }, React.createElement(IconButton, {\n    icon: getTimeInputTypeIcon(inputType, {\n      keyboard: keyboardIcon,\n      picker: clockIcon\n    }),\n    onPress: function onPress() {\n      return setInputType(reverseInputTypes[inputType]);\n    },\n    size: 24,\n    style: styles.inputTypeToggle,\n    accessibilityLabel: \"toggle keyboard\"\n  }), React.createElement(View, {\n    style: styles.fill\n  }), React.createElement(Button, {\n    onPress: onDismiss,\n    uppercase: uppercase\n  }, cancelLabel), React.createElement(Button, {\n    onPress: function onPress() {\n      return onConfirm({\n        hours: localHours,\n        minutes: localMinutes\n      });\n    },\n    uppercase: uppercase\n  }, confirmLabel)))))));\n}\n\nfunction getMinutes(minutes) {\n  return minutes === undefined || minutes === null ? new Date().getMinutes() : minutes;\n}\n\nfunction getHours(hours) {\n  return hours === undefined || hours === null ? new Date().getHours() : hours;\n}\n\nvar styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  keyboardView: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  modalBackground: {\n    flex: 1\n  },\n  modalContent: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    minWidth: 287\n  },\n  labelContainer: {\n    height: 28,\n    justifyContent: 'flex-end',\n    paddingLeft: 24,\n    paddingRight: 24\n  },\n  label: {\n    letterSpacing: 1,\n    fontSize: 13\n  },\n  timePickerContainer: {\n    padding: 24\n  },\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  inputTypeToggle: {\n    margin: 4\n  },\n  fill: {\n    flex: 1\n  }\n});\nexport default React.memo(TimePickerModal);","map":{"version":3,"mappings":"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","names":["React","Button","IconButton","overlay","useTheme","TimePicker","clockTypes","getTimeInputTypeIcon","inputTypes","reverseInputTypes","supportedOrientations","TimePickerModal","visible","onDismiss","onConfirm","hours","minutes","label","uppercase","cancelLabel","confirmLabel","animationType","locale","keyboardIcon","clockIcon","theme","useState","picker","inputType","setInputType","focused","setFocused","getHours","localHours","setLocalHours","getMinutes","localMinutes","setLocalMinutes","useEffect","onFocusInput","useCallback","type","onChange","params","Modal","transparent","onRequestClose","presentationStyle","statusBarTranslucent","TouchableWithoutFeedback","onPress","View","style","StyleSheet","absoluteFill","styles","modalBackground","backgroundColor","colors","backdrop","modalRoot","pointerEvents","KeyboardAvoidingView","keyboardView","behavior","Animated","modalContent","dark","surface","borderRadius","roundness","labelContainer","Text","color","text","toUpperCase","timePickerContainer","bottom","icon","keyboard","size","inputTypeToggle","accessibilityLabel","fill","undefined","Date","create","justifyContent","alignItems","flex","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","minWidth","paddingLeft","paddingRight","letterSpacing","fontSize","padding","flexDirection","margin","memo"],"sources":["TimePickerModal.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  Modal,\n  StyleSheet,\n  View,\n  Text,\n  Animated,\n  TouchableWithoutFeedback,\n  KeyboardAvoidingView,\n} from 'react-native'\n\nimport { Button, IconButton, overlay, useTheme } from 'react-native-paper'\nimport TimePicker from './TimePicker'\nimport {\n  clockTypes,\n  getTimeInputTypeIcon,\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  reverseInputTypes,\n} from './timeUtils'\n\nconst supportedOrientations: any[] = [\n  'portrait',\n  'portrait-upside-down',\n  'landscape',\n  'landscape-left',\n  'landscape-right',\n]\n\nexport function TimePickerModal({\n  visible,\n  onDismiss,\n  onConfirm,\n  hours,\n  minutes,\n  label = 'Select time',\n  uppercase = true,\n  cancelLabel = 'Cancel',\n  confirmLabel = 'Ok',\n  animationType = 'none',\n  locale,\n  keyboardIcon = 'keyboard-outline',\n  clockIcon = 'clock-outline',\n}: {\n  locale?: undefined | string\n  label?: string\n  uppercase?: boolean\n  cancelLabel?: string\n  confirmLabel?: string\n  hours?: number | undefined\n  minutes?: number | undefined\n  visible: boolean | undefined\n  onDismiss: () => any\n  onConfirm: (hoursAndMinutes: { hours: number; minutes: number }) => any\n  animationType?: 'slide' | 'fade' | 'none'\n  keyboardIcon?: string\n  clockIcon?: string\n}) {\n  const theme = useTheme()\n\n  const [inputType, setInputType] = React.useState<PossibleInputTypes>(\n    inputTypes.picker\n  )\n  const [focused, setFocused] = React.useState<PossibleClockTypes>(\n    clockTypes.hours\n  )\n  const [localHours, setLocalHours] = React.useState<number>(getHours(hours))\n  const [localMinutes, setLocalMinutes] = React.useState<number>(\n    getMinutes(minutes)\n  )\n\n  React.useEffect(() => {\n    setLocalHours(getHours(hours))\n  }, [setLocalHours, hours])\n\n  React.useEffect(() => {\n    setLocalMinutes(getMinutes(minutes))\n  }, [setLocalMinutes, minutes])\n\n  const onFocusInput = React.useCallback(\n    (type: PossibleClockTypes) => setFocused(type),\n    []\n  )\n  const onChange = React.useCallback(\n    (params: {\n      focused?: PossibleClockTypes | undefined\n      hours: number\n      minutes: number\n    }) => {\n      if (params.focused) {\n        setFocused(params.focused)\n      }\n\n      setLocalHours(params.hours)\n      setLocalMinutes(params.minutes)\n    },\n    [setFocused, setLocalHours, setLocalMinutes]\n  )\n  return (\n    <Modal\n      animationType={animationType}\n      transparent={true}\n      visible={visible}\n      onRequestClose={onDismiss}\n      presentationStyle=\"overFullScreen\"\n      supportedOrientations={supportedOrientations}\n      //@ts-ignore\n      statusBarTranslucent={true}\n    >\n      <>\n        <TouchableWithoutFeedback onPress={onDismiss}>\n          <View\n            style={[\n              StyleSheet.absoluteFill,\n              styles.modalBackground,\n              { backgroundColor: theme.colors.backdrop },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n\n        <View\n          style={[StyleSheet.absoluteFill, styles.modalRoot]}\n          pointerEvents=\"box-none\"\n        >\n          <KeyboardAvoidingView\n            style={styles.keyboardView}\n            behavior={'padding'}\n          >\n            <Animated.View\n              style={[\n                styles.modalContent,\n                {\n                  backgroundColor: theme.dark\n                    ? overlay(10, theme.colors.surface)\n                    : theme.colors.surface,\n                  borderRadius: theme.roundness,\n                },\n              ]}\n            >\n              <View style={styles.labelContainer}>\n                <Text style={[styles.label, { color: theme.colors.text }]}>\n                  {uppercase ? label.toUpperCase() : label}\n                </Text>\n              </View>\n              <View style={styles.timePickerContainer}>\n                <TimePicker\n                  locale={locale}\n                  inputType={inputType}\n                  focused={focused}\n                  hours={localHours}\n                  minutes={localMinutes}\n                  onChange={onChange}\n                  onFocusInput={onFocusInput}\n                />\n              </View>\n              <View style={styles.bottom}>\n                <IconButton\n                  icon={getTimeInputTypeIcon(inputType, {\n                    keyboard: keyboardIcon,\n                    picker: clockIcon,\n                  })}\n                  onPress={() => setInputType(reverseInputTypes[inputType])}\n                  size={24}\n                  style={styles.inputTypeToggle}\n                  accessibilityLabel=\"toggle keyboard\"\n                />\n                <View style={styles.fill} />\n                <Button onPress={onDismiss} uppercase={uppercase}>\n                  {cancelLabel}\n                </Button>\n                <Button\n                  onPress={() =>\n                    onConfirm({ hours: localHours, minutes: localMinutes })\n                  }\n                  uppercase={uppercase}\n                >\n                  {confirmLabel}\n                </Button>\n              </View>\n            </Animated.View>\n          </KeyboardAvoidingView>\n        </View>\n      </>\n    </Modal>\n  )\n}\n\nfunction getMinutes(minutes: number | undefined | null): number {\n  return minutes === undefined || minutes === null\n    ? new Date().getMinutes()\n    : minutes\n}\nfunction getHours(hours: number | undefined | null): number {\n  return hours === undefined || hours === null ? new Date().getHours() : hours\n}\n\nconst styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  keyboardView: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  modalBackground: {\n    flex: 1,\n  },\n  modalContent: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 5,\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    minWidth: 287,\n  },\n  labelContainer: {\n    height: 28,\n    justifyContent: 'flex-end',\n    paddingLeft: 24,\n    paddingRight: 24,\n  },\n  label: {\n    letterSpacing: 1,\n    fontSize: 13,\n  },\n  timePickerContainer: { padding: 24 },\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  inputTypeToggle: { margin: 4 },\n  fill: { flex: 1 },\n})\n\nexport default React.memo(TimePickerModal)\n"]},"metadata":{},"sourceType":"module"}