{"ast":null,"code":"import * as React from 'react';\nimport { Text, TouchableRipple } from 'react-native-paper';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DayRange from \"./DayRange\";\nimport { daySize } from \"./dateUtils\";\n\nfunction EmptyDayPure() {\n  return React.createElement(View, {\n    style: styles.empty\n  });\n}\n\nexport var EmptyDay = React.memo(EmptyDayPure);\n\nfunction Day(props) {\n  var day = props.day,\n      month = props.month,\n      year = props.year,\n      selected = props.selected,\n      inRange = props.inRange,\n      leftCrop = props.leftCrop,\n      rightCrop = props.rightCrop,\n      onPressDate = props.onPressDate,\n      primaryColor = props.primaryColor,\n      selectColor = props.selectColor,\n      isToday = props.isToday,\n      disabled = props.disabled,\n      textColorOnPrimary = props.textColorOnPrimary,\n      theme = props.theme;\n  var onPress = React.useCallback(function () {\n    onPressDate(new Date(year, month, day));\n  }, [onPressDate, year, month, day]);\n  var borderColor = selected || inRange && theme.dark ? textColorOnPrimary : theme.dark ? '#fff' : '#000';\n  var textColor = selected || inRange && theme.dark ? textColorOnPrimary : undefined;\n  return React.createElement(View, {\n    style: [styles.root, disabled && styles.disabled]\n  }, React.createElement(DayRange, {\n    inRange: inRange,\n    leftCrop: leftCrop,\n    rightCrop: rightCrop,\n    selectColor: selectColor\n  }), React.createElement(TouchableRipple, {\n    testID: \"react-native-paper-dates-day-\" + year + \"-\" + month + \"-\" + day,\n    disabled: disabled,\n    borderless: true,\n    onPress: disabled ? undefined : onPress,\n    style: [styles.button, {\n      backgroundColor: inRange ? selectColor : undefined\n    }],\n    accessibilityRole: \"button\"\n  }, React.createElement(View, {\n    style: [styles.day, isToday ? {\n      borderColor: borderColor\n    } : null, selected ? {\n      backgroundColor: primaryColor\n    } : null]\n  }, React.createElement(Text, {\n    style: textColor ? {\n      color: textColor\n    } : undefined,\n    selectable: false\n  }, day))));\n}\n\nvar styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0\n  },\n  disabled: {\n    opacity: 0.3\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative'\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent'\n  },\n  flex1: {\n    flex: 1\n  }\n});\nexport default React.memo(Day);","map":{"version":3,"mappings":"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","names":["React","Text","TouchableRipple","DayRange","daySize","EmptyDayPure","View","style","styles","empty","EmptyDay","memo","Day","props","day","month","year","selected","inRange","leftCrop","rightCrop","onPressDate","primaryColor","selectColor","isToday","disabled","textColorOnPrimary","theme","onPress","useCallback","Date","borderColor","dark","textColor","undefined","root","testID","borderless","button","backgroundColor","accessibilityRole","color","selectable","StyleSheet","create","flex","flexBasis","opacity","justifyContent","alignItems","position","width","height","overflow","borderRadius","borderWidth","flex1"],"sources":["Day.tsx"],"sourcesContent":["import * as React from 'react'\nimport { DarkTheme, Text, TouchableRipple } from 'react-native-paper'\nimport { StyleSheet, View } from 'react-native'\nimport DayRange from './DayRange'\nimport { daySize } from './dateUtils'\n\nfunction EmptyDayPure() {\n  return <View style={styles.empty} />\n}\nexport const EmptyDay = React.memo(EmptyDayPure)\n\nfunction Day(props: {\n  theme: typeof DarkTheme\n  textColorOnPrimary: string\n  day: number\n  month: number\n  year: number\n  selected: boolean\n  inRange: boolean\n  leftCrop: boolean\n  rightCrop: boolean\n  primaryColor: string\n  selectColor: string\n  isToday: boolean\n  disabled: boolean\n  onPressDate: (date: Date) => any\n}) {\n  const {\n    day,\n    month,\n    year,\n    selected,\n    inRange,\n    leftCrop,\n    rightCrop,\n    onPressDate,\n    primaryColor,\n    selectColor,\n    isToday,\n    disabled,\n    textColorOnPrimary,\n    theme,\n  } = props\n  // console.log(month, { day })\n  const onPress = React.useCallback(() => {\n    onPressDate(new Date(year, month, day))\n  }, [onPressDate, year, month, day])\n\n  const borderColor =\n    selected || (inRange && theme.dark)\n      ? textColorOnPrimary\n      : theme.dark\n      ? '#fff'\n      : '#000'\n  const textColor =\n    selected || (inRange && theme.dark) ? textColorOnPrimary : undefined\n\n  return (\n    <View style={[styles.root, disabled && styles.disabled]}>\n      <DayRange\n        inRange={inRange}\n        leftCrop={leftCrop}\n        rightCrop={rightCrop}\n        selectColor={selectColor}\n      />\n\n      <TouchableRipple\n        testID={`react-native-paper-dates-day-${year}-${month}-${day}`}\n        disabled={disabled}\n        borderless={true}\n        onPress={disabled ? undefined : onPress}\n        style={[\n          styles.button,\n          { backgroundColor: inRange ? selectColor : undefined },\n        ]}\n        accessibilityRole=\"button\"\n      >\n        <View\n          style={[\n            styles.day,\n            isToday ? { borderColor: borderColor } : null,\n            selected ? { backgroundColor: primaryColor } : null,\n          ]}\n        >\n          <Text\n            style={textColor ? { color: textColor } : undefined}\n            selectable={false}\n          >\n            {day}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0,\n  },\n  disabled: {\n    opacity: 0.3,\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2,\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent',\n  },\n  flex1: {\n    flex: 1,\n  },\n})\n\nexport default React.memo(Day)\n"]},"metadata":{},"sourceType":"module"}