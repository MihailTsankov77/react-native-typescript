{"ast":null,"code":"var translationsPerLocale = {};\nexport function getTranslation(locale, key, fallback) {\n  var l = locale || 'en';\n  var translationForLocale = translationsPerLocale[l];\n\n  if (!translationForLocale) {\n    console.warn(\"[react-native-paper-dates] \" + locale + \" is not registered, key: \" + key);\n    return fallback || key;\n  }\n\n  var translation = translationsPerLocale[l][key];\n\n  if (!translation) {\n    console.warn(\"[react-native-paper-dates] \" + locale + \" is registered, but \" + key + \" is missing\");\n  }\n\n  return translation || fallback || key;\n}\nexport function registerTranslation(locale, translations) {\n  translationsPerLocale[locale] = translations;\n}","map":{"version":3,"mappings":"AAiBA,IAAIA,qBAAuD,GAAG,EAA9D;AAEA,OAAO,SAASC,cAAT,CACLC,MADK,EAELC,GAFK,EAGLC,QAHK,EAIL;EACA,IAAMC,CAAC,GAAGH,MAAM,IAAI,IAApB;EACA,IAAMI,oBAAoB,GAAGN,qBAAqB,CAACK,CAAD,CAAlD;;EACA,IAAI,CAACC,oBAAL,EAA2B;IACzBC,OAAO,CAACC,IAARD,iCACgCL,MADhCK,iCACkEJ,GADlEI;IAGA,OAAOH,QAAQ,IAAID,GAAnB;EACD;;EACD,IAAMM,WAAW,GAAGT,qBAAqB,CAACK,CAAD,CAArBL,CAAyBG,GAAzBH,CAApB;;EACA,IAAI,CAACS,WAAL,EAAkB;IAChBF,OAAO,CAACC,IAARD,iCACgCL,MADhCK,4BAC6DJ,GAD7DI;EAGD;;EACD,OAAOE,WAAW,IAAIL,QAAfK,IAA2BN,GAAlC;AACD;AAED,OAAO,SAASO,mBAAT,CACLR,MADK,EAELS,YAFK,EAGL;EACAX,qBAAqB,CAACE,MAAD,CAArBF,GAAgCW,YAAhCX;AACD","names":["translationsPerLocale","getTranslation","locale","key","fallback","l","translationForLocale","console","warn","translation","registerTranslation","translations"],"sources":["utils.ts"],"sourcesContent":["export type TranslationsType = {\n  selectSingle: string\n  selectMultiple: string\n  selectRange: string\n  save: string\n  notAccordingToDateFormat: (inputFormat: string) => string\n  mustBeHigherThan: (date: string) => string\n  mustBeLowerThan: (date: string) => string\n  mustBeBetween: (startDate: string, endDate: string) => string\n  dateIsDisabled: string\n  previous: string\n  next: string\n  typeInDate: string\n  pickDateFromCalendar: string\n  close: string\n}\n\nlet translationsPerLocale: Record<string, TranslationsType> = {}\n\nexport function getTranslation<K extends keyof TranslationsType>(\n  locale: string | undefined,\n  key: K,\n  fallback?: any\n) {\n  const l = locale || 'en'\n  const translationForLocale = translationsPerLocale[l]\n  if (!translationForLocale) {\n    console.warn(\n      `[react-native-paper-dates] ${locale} is not registered, key: ${key}`\n    )\n    return fallback || key\n  }\n  const translation = translationsPerLocale[l][key]\n  if (!translation) {\n    console.warn(\n      `[react-native-paper-dates] ${locale} is registered, but ${key} is missing`\n    )\n  }\n  return translation || fallback || key\n}\n\nexport function registerTranslation(\n  locale: string,\n  translations: TranslationsType\n) {\n  translationsPerLocale[locale] = translations\n}\n"]},"metadata":{},"sourceType":"module"}